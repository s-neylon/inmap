// Copyright Â© 2017 the InMAP authors.
// This file is part of InMAP.

// InMAP is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// InMAP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with InMAP.  If not, see <http://www.gnu.org/licenses/>.

//
//Compile by: protoc eieio.proto --go_out=plugins=grpc:eieiorpc --gopherjs_out=plugins=grpc:eieiorpc/eieiorpcjs
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: eieio.proto

package eieiorpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Pollutant int32

const (
	Pollutant_PNH4        Pollutant = 0
	Pollutant_PNO3        Pollutant = 1
	Pollutant_PSO4        Pollutant = 2
	Pollutant_SOA         Pollutant = 3
	Pollutant_PrimaryPM25 Pollutant = 4
	Pollutant_TotalPM25   Pollutant = 5
)

// Enum value maps for Pollutant.
var (
	Pollutant_name = map[int32]string{
		0: "PNH4",
		1: "PNO3",
		2: "PSO4",
		3: "SOA",
		4: "PrimaryPM25",
		5: "TotalPM25",
	}
	Pollutant_value = map[string]int32{
		"PNH4":        0,
		"PNO3":        1,
		"PSO4":        2,
		"SOA":         3,
		"PrimaryPM25": 4,
		"TotalPM25":   5,
	}
)

func (x Pollutant) Enum() *Pollutant {
	p := new(Pollutant)
	*p = x
	return p
}

func (x Pollutant) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Pollutant) Descriptor() protoreflect.EnumDescriptor {
	return file_eieio_proto_enumTypes[0].Descriptor()
}

func (Pollutant) Type() protoreflect.EnumType {
	return &file_eieio_proto_enumTypes[0]
}

func (x Pollutant) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Pollutant.Descriptor instead.
func (Pollutant) EnumDescriptor() ([]byte, []int) {
	return file_eieio_proto_rawDescGZIP(), []int{0}
}

type Emission int32

const (
	Emission_PM25 Emission = 0
	Emission_NH3  Emission = 1
	Emission_NOx  Emission = 2
	Emission_SOx  Emission = 3
	Emission_VOC  Emission = 4
)

// Enum value maps for Emission.
var (
	Emission_name = map[int32]string{
		0: "PM25",
		1: "NH3",
		2: "NOx",
		3: "SOx",
		4: "VOC",
	}
	Emission_value = map[string]int32{
		"PM25": 0,
		"NH3":  1,
		"NOx":  2,
		"SOx":  3,
		"VOC":  4,
	}
)

func (x Emission) Enum() *Emission {
	p := new(Emission)
	*p = x
	return p
}

func (x Emission) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Emission) Descriptor() protoreflect.EnumDescriptor {
	return file_eieio_proto_enumTypes[1].Descriptor()
}

func (Emission) Type() protoreflect.EnumType {
	return &file_eieio_proto_enumTypes[1]
}

func (x Emission) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Emission.Descriptor instead.
func (Emission) EnumDescriptor() ([]byte, []int) {
	return file_eieio_proto_rawDescGZIP(), []int{1}
}

type Location int32

const (
	Location_Domestic Location = 0
	Location_Imported Location = 1
	Location_Total    Location = 2
)

// Enum value maps for Location.
var (
	Location_name = map[int32]string{
		0: "Domestic",
		1: "Imported",
		2: "Total",
	}
	Location_value = map[string]int32{
		"Domestic": 0,
		"Imported": 1,
		"Total":    2,
	}
)

func (x Location) Enum() *Location {
	p := new(Location)
	*p = x
	return p
}

func (x Location) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Location) Descriptor() protoreflect.EnumDescriptor {
	return file_eieio_proto_enumTypes[2].Descriptor()
}

func (Location) Type() protoreflect.EnumType {
	return &file_eieio_proto_enumTypes[2]
}

func (x Location) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Location.Descriptor instead.
func (Location) EnumDescriptor() ([]byte, []int) {
	return file_eieio_proto_rawDescGZIP(), []int{2}
}

type FinalDemandType int32

const (
	// This group of demand types is directly available in the spreadsheet.
	FinalDemandType_PersonalConsumption   FinalDemandType = 0
	FinalDemandType_PrivateStructures     FinalDemandType = 1
	FinalDemandType_PrivateEquipment      FinalDemandType = 2
	FinalDemandType_PrivateIP             FinalDemandType = 3
	FinalDemandType_PrivateResidential    FinalDemandType = 4
	FinalDemandType_InventoryChange       FinalDemandType = 5
	FinalDemandType_Export                FinalDemandType = 6
	FinalDemandType_DefenseConsumption    FinalDemandType = 7
	FinalDemandType_DefenseStructures     FinalDemandType = 8
	FinalDemandType_DefenseEquipment      FinalDemandType = 9
	FinalDemandType_DefenseIP             FinalDemandType = 10
	FinalDemandType_NondefenseConsumption FinalDemandType = 11
	FinalDemandType_NondefenseStructures  FinalDemandType = 12
	FinalDemandType_NondefenseEquipment   FinalDemandType = 13
	FinalDemandType_NondefenseIP          FinalDemandType = 14
	FinalDemandType_LocalConsumption      FinalDemandType = 15
	FinalDemandType_LocalStructures       FinalDemandType = 16
	FinalDemandType_LocalEquipment        FinalDemandType = 17
	FinalDemandType_LocalIP               FinalDemandType = 18
	// This group of demand types consists of aggregates of the
	// above types.
	FinalDemandType_AllDemand FinalDemandType = 19 // All is a combination of all categories above.
	FinalDemandType_NonExport FinalDemandType = 20 // NonExport is (All - Export)
)

// Enum value maps for FinalDemandType.
var (
	FinalDemandType_name = map[int32]string{
		0:  "PersonalConsumption",
		1:  "PrivateStructures",
		2:  "PrivateEquipment",
		3:  "PrivateIP",
		4:  "PrivateResidential",
		5:  "InventoryChange",
		6:  "Export",
		7:  "DefenseConsumption",
		8:  "DefenseStructures",
		9:  "DefenseEquipment",
		10: "DefenseIP",
		11: "NondefenseConsumption",
		12: "NondefenseStructures",
		13: "NondefenseEquipment",
		14: "NondefenseIP",
		15: "LocalConsumption",
		16: "LocalStructures",
		17: "LocalEquipment",
		18: "LocalIP",
		19: "AllDemand",
		20: "NonExport",
	}
	FinalDemandType_value = map[string]int32{
		"PersonalConsumption":   0,
		"PrivateStructures":     1,
		"PrivateEquipment":      2,
		"PrivateIP":             3,
		"PrivateResidential":    4,
		"InventoryChange":       5,
		"Export":                6,
		"DefenseConsumption":    7,
		"DefenseStructures":     8,
		"DefenseEquipment":      9,
		"DefenseIP":             10,
		"NondefenseConsumption": 11,
		"NondefenseStructures":  12,
		"NondefenseEquipment":   13,
		"NondefenseIP":          14,
		"LocalConsumption":      15,
		"LocalStructures":       16,
		"LocalEquipment":        17,
		"LocalIP":               18,
		"AllDemand":             19,
		"NonExport":             20,
	}
)

func (x FinalDemandType) Enum() *FinalDemandType {
	p := new(FinalDemandType)
	*p = x
	return p
}

func (x FinalDemandType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FinalDemandType) Descriptor() protoreflect.EnumDescriptor {
	return file_eieio_proto_enumTypes[3].Descriptor()
}

func (FinalDemandType) Type() protoreflect.EnumType {
	return &file_eieio_proto_enumTypes[3]
}

func (x FinalDemandType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FinalDemandType.Descriptor instead.
func (FinalDemandType) EnumDescriptor() ([]byte, []int) {
	return file_eieio_proto_rawDescGZIP(), []int{3}
}

type Ethnicity int32

const (
	Ethnicity_Black         Ethnicity = 0
	Ethnicity_Hispanic      Ethnicity = 1
	Ethnicity_WhiteOther    Ethnicity = 2
	Ethnicity_Ethnicity_All Ethnicity = 3
)

// Enum value maps for Ethnicity.
var (
	Ethnicity_name = map[int32]string{
		0: "Black",
		1: "Hispanic",
		2: "WhiteOther",
		3: "Ethnicity_All",
	}
	Ethnicity_value = map[string]int32{
		"Black":         0,
		"Hispanic":      1,
		"WhiteOther":    2,
		"Ethnicity_All": 3,
	}
)

func (x Ethnicity) Enum() *Ethnicity {
	p := new(Ethnicity)
	*p = x
	return p
}

func (x Ethnicity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ethnicity) Descriptor() protoreflect.EnumDescriptor {
	return file_eieio_proto_enumTypes[4].Descriptor()
}

func (Ethnicity) Type() protoreflect.EnumType {
	return &file_eieio_proto_enumTypes[4]
}

func (x Ethnicity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ethnicity.Descriptor instead.
func (Ethnicity) EnumDescriptor() ([]byte, []int) {
	return file_eieio_proto_rawDescGZIP(), []int{4}
}

type Decile int32

const (
	Decile_LowestTen        Decile = 0
	Decile_SecondLowestTen  Decile = 1
	Decile_ThirdLowestTen   Decile = 2
	Decile_FourthLowestTen  Decile = 3
	Decile_FifthLowestTen   Decile = 4
	Decile_SixthLowestTen   Decile = 5
	Decile_SeventhLowestTen Decile = 6
	Decile_EighthLowestTen  Decile = 7
	Decile_NinthLowestTen   Decile = 8
	Decile_HighestTen       Decile = 9
	Decile_Decile_All       Decile = 10
)

// Enum value maps for Decile.
var (
	Decile_name = map[int32]string{
		0:  "LowestTen",
		1:  "SecondLowestTen",
		2:  "ThirdLowestTen",
		3:  "FourthLowestTen",
		4:  "FifthLowestTen",
		5:  "SixthLowestTen",
		6:  "SeventhLowestTen",
		7:  "EighthLowestTen",
		8:  "NinthLowestTen",
		9:  "HighestTen",
		10: "Decile_All",
	}
	Decile_value = map[string]int32{
		"LowestTen":        0,
		"SecondLowestTen":  1,
		"ThirdLowestTen":   2,
		"FourthLowestTen":  3,
		"FifthLowestTen":   4,
		"SixthLowestTen":   5,
		"SeventhLowestTen": 6,
		"EighthLowestTen":  7,
		"NinthLowestTen":   8,
		"HighestTen":       9,
		"Decile_All":       10,
	}
)

func (x Decile) Enum() *Decile {
	p := new(Decile)
	*p = x
	return p
}

func (x Decile) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Decile) Descriptor() protoreflect.EnumDescriptor {
	return file_eieio_proto_enumTypes[5].Descriptor()
}

func (Decile) Type() protoreflect.EnumType {
	return &file_eieio_proto_enumTypes[5]
}

func (x Decile) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Decile.Descriptor instead.
func (Decile) EnumDescriptor() ([]byte, []int) {
	return file_eieio_proto_rawDescGZIP(), []int{5}
}

type StringInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	String_ string `protobuf:"bytes,1,opt,name=String,proto3" json:"String,omitempty"`
}

func (x *StringInput) Reset() {
	*x = StringInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eieio_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringInput) ProtoMessage() {}

func (x *StringInput) ProtoReflect() protoreflect.Message {
	mi := &file_eieio_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringInput.ProtoReflect.Descriptor instead.
func (*StringInput) Descriptor() ([]byte, []int) {
	return file_eieio_proto_rawDescGZIP(), []int{0}
}

func (x *StringInput) GetString_() string {
	if x != nil {
		return x.String_
	}
	return ""
}

type StringList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []string `protobuf:"bytes,1,rep,name=List,proto3" json:"List,omitempty"`
}

func (x *StringList) Reset() {
	*x = StringList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eieio_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringList) ProtoMessage() {}

func (x *StringList) ProtoReflect() protoreflect.Message {
	mi := &file_eieio_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringList.ProtoReflect.Descriptor instead.
func (*StringList) Descriptor() ([]byte, []int) {
	return file_eieio_proto_rawDescGZIP(), []int{1}
}

func (x *StringList) GetList() []string {
	if x != nil {
		return x.List
	}
	return nil
}

type Selectors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codes  []string  `protobuf:"bytes,1,rep,name=Codes,proto3" json:"Codes,omitempty"`
	Names  []string  `protobuf:"bytes,2,rep,name=Names,proto3" json:"Names,omitempty"`
	Values []float32 `protobuf:"fixed32,3,rep,packed,name=Values,proto3" json:"Values,omitempty"`
}

func (x *Selectors) Reset() {
	*x = Selectors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eieio_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Selectors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Selectors) ProtoMessage() {}

func (x *Selectors) ProtoReflect() protoreflect.Message {
	mi := &file_eieio_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Selectors.ProtoReflect.Descriptor instead.
func (*Selectors) Descriptor() ([]byte, []int) {
	return file_eieio_proto_rawDescGZIP(), []int{2}
}

func (x *Selectors) GetCodes() []string {
	if x != nil {
		return x.Codes
	}
	return nil
}

func (x *Selectors) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *Selectors) GetValues() []float32 {
	if x != nil {
		return x.Values
	}
	return nil
}

type Selection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndUseGroup     string          `protobuf:"bytes,1,opt,name=EndUseGroup,proto3" json:"EndUseGroup,omitempty"`
	EndUseSector    string          `protobuf:"bytes,2,opt,name=EndUseSector,proto3" json:"EndUseSector,omitempty"`
	EmitterGroup    string          `protobuf:"bytes,3,opt,name=EmitterGroup,proto3" json:"EmitterGroup,omitempty"`
	EmitterSector   string          `protobuf:"bytes,4,opt,name=EmitterSector,proto3" json:"EmitterSector,omitempty"`
	ImpactType      string          `protobuf:"bytes,5,opt,name=ImpactType,proto3" json:"ImpactType,omitempty"`
	FinalDemandType FinalDemandType `protobuf:"varint,6,opt,name=FinalDemandType,proto3,enum=eieiorpc.FinalDemandType" json:"FinalDemandType,omitempty"`
	Year            int32           `protobuf:"varint,7,opt,name=Year,proto3" json:"Year,omitempty"`
	Population      string          `protobuf:"bytes,8,opt,name=Population,proto3" json:"Population,omitempty"`
	// Types that are assignable to Pol:
	//	*Selection_Pollutant
	//	*Selection_Emission
	Pol isSelection_Pol `protobuf_oneof:"Pol"`
	AQM string          `protobuf:"bytes,11,opt,name=AQM,proto3" json:"AQM,omitempty"`
}

func (x *Selection) Reset() {
	*x = Selection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eieio_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Selection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Selection) ProtoMessage() {}

func (x *Selection) ProtoReflect() protoreflect.Message {
	mi := &file_eieio_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Selection.ProtoReflect.Descriptor instead.
func (*Selection) Descriptor() ([]byte, []int) {
	return file_eieio_proto_rawDescGZIP(), []int{3}
}

func (x *Selection) GetEndUseGroup() string {
	if x != nil {
		return x.EndUseGroup
	}
	return ""
}

func (x *Selection) GetEndUseSector() string {
	if x != nil {
		return x.EndUseSector
	}
	return ""
}

func (x *Selection) GetEmitterGroup() string {
	if x != nil {
		return x.EmitterGroup
	}
	return ""
}

func (x *Selection) GetEmitterSector() string {
	if x != nil {
		return x.EmitterSector
	}
	return ""
}

func (x *Selection) GetImpactType() string {
	if x != nil {
		return x.ImpactType
	}
	return ""
}

func (x *Selection) GetFinalDemandType() FinalDemandType {
	if x != nil {
		return x.FinalDemandType
	}
	return FinalDemandType_PersonalConsumption
}

func (x *Selection) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *Selection) GetPopulation() string {
	if x != nil {
		return x.Population
	}
	return ""
}

func (m *Selection) GetPol() isSelection_Pol {
	if m != nil {
		return m.Pol
	}
	return nil
}

func (x *Selection) GetPollutant() Pollutant {
	if x, ok := x.GetPol().(*Selection_Pollutant); ok {
		return x.Pollutant
	}
	return Pollutant_PNH4
}

func (x *Selection) GetEmission() Emission {
	if x, ok := x.GetPol().(*Selection_Emission); ok {
		return x.Emission
	}
	return Emission_PM25
}

func (x *Selection) GetAQM() string {
	if x != nil {
		return x.AQM
	}
	return ""
}

type isSelection_Pol interface {
	isSelection_Pol()
}

type Selection_Pollutant struct {
	Pollutant Pollutant `protobuf:"varint,9,opt,name=Pollutant,proto3,enum=eieiorpc.Pollutant,oneof"`
}

type Selection_Emission struct {
	Emission Emission `protobuf:"varint,10,opt,name=Emission,proto3,enum=eieiorpc.Emission,oneof"`
}

func (*Selection_Pollutant) isSelection_Pol() {}

func (*Selection_Emission) isSelection_Pol() {}

type Year struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Years []int32 `protobuf:"varint,1,rep,packed,name=Years,proto3" json:"Years,omitempty"`
}

func (x *Year) Reset() {
	*x = Year{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eieio_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Year) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Year) ProtoMessage() {}

func (x *Year) ProtoReflect() protoreflect.Message {
	mi := &file_eieio_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Year.ProtoReflect.Descriptor instead.
func (*Year) Descriptor() ([]byte, []int) {
	return file_eieio_proto_rawDescGZIP(), []int{4}
}

func (x *Year) GetYears() []int32 {
	if x != nil {
		return x.Years
	}
	return nil
}

type Point struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float32 `protobuf:"fixed32,1,opt,name=X,proto3" json:"X,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=Y,proto3" json:"Y,omitempty"`
}

func (x *Point) Reset() {
	*x = Point{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eieio_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Point) ProtoMessage() {}

func (x *Point) ProtoReflect() protoreflect.Message {
	mi := &file_eieio_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Point.ProtoReflect.Descriptor instead.
func (*Point) Descriptor() ([]byte, []int) {
	return file_eieio_proto_rawDescGZIP(), []int{5}
}

func (x *Point) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Point) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

type Rectangle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LL *Point `protobuf:"bytes,1,opt,name=LL,proto3" json:"LL,omitempty"`
	LR *Point `protobuf:"bytes,2,opt,name=LR,proto3" json:"LR,omitempty"`
	UR *Point `protobuf:"bytes,3,opt,name=UR,proto3" json:"UR,omitempty"`
	UL *Point `protobuf:"bytes,4,opt,name=UL,proto3" json:"UL,omitempty"`
}

func (x *Rectangle) Reset() {
	*x = Rectangle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eieio_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rectangle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rectangle) ProtoMessage() {}

func (x *Rectangle) ProtoReflect() protoreflect.Message {
	mi := &file_eieio_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rectangle.ProtoReflect.Descriptor instead.
func (*Rectangle) Descriptor() ([]byte, []int) {
	return file_eieio_proto_rawDescGZIP(), []int{6}
}

func (x *Rectangle) GetLL() *Point {
	if x != nil {
		return x.LL
	}
	return nil
}

func (x *Rectangle) GetLR() *Point {
	if x != nil {
		return x.LR
	}
	return nil
}

func (x *Rectangle) GetUR() *Point {
	if x != nil {
		return x.UR
	}
	return nil
}

func (x *Rectangle) GetUL() *Point {
	if x != nil {
		return x.UL
	}
	return nil
}

type Rectangles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rectangles []*Rectangle `protobuf:"bytes,1,rep,name=Rectangles,proto3" json:"Rectangles,omitempty"`
}

func (x *Rectangles) Reset() {
	*x = Rectangles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eieio_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rectangles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rectangles) ProtoMessage() {}

func (x *Rectangles) ProtoReflect() protoreflect.Message {
	mi := &file_eieio_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rectangles.ProtoReflect.Descriptor instead.
func (*Rectangles) Descriptor() ([]byte, []int) {
	return file_eieio_proto_rawDescGZIP(), []int{7}
}

func (x *Rectangles) GetRectangles() []*Rectangle {
	if x != nil {
		return x.Rectangles
	}
	return nil
}

type GeometryInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpatialReference string `protobuf:"bytes,1,opt,name=SpatialReference,proto3" json:"SpatialReference,omitempty"`
	AQM              string `protobuf:"bytes,2,opt,name=AQM,proto3" json:"AQM,omitempty"`
}

func (x *GeometryInput) Reset() {
	*x = GeometryInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eieio_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeometryInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeometryInput) ProtoMessage() {}

func (x *GeometryInput) ProtoReflect() protoreflect.Message {
	mi := &file_eieio_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeometryInput.ProtoReflect.Descriptor instead.
func (*GeometryInput) Descriptor() ([]byte, []int) {
	return file_eieio_proto_rawDescGZIP(), []int{8}
}

func (x *GeometryInput) GetSpatialReference() string {
	if x != nil {
		return x.SpatialReference
	}
	return ""
}

func (x *GeometryInput) GetAQM() string {
	if x != nil {
		return x.AQM
	}
	return ""
}

type ColorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RGB    [][]byte `protobuf:"bytes,1,rep,name=RGB,proto3" json:"RGB,omitempty"`
	Legend string   `protobuf:"bytes,2,opt,name=Legend,proto3" json:"Legend,omitempty"`
}

func (x *ColorInfo) Reset() {
	*x = ColorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eieio_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColorInfo) ProtoMessage() {}

func (x *ColorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_eieio_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColorInfo.ProtoReflect.Descriptor instead.
func (*ColorInfo) Descriptor() ([]byte, []int) {
	return file_eieio_proto_rawDescGZIP(), []int{9}
}

func (x *ColorInfo) GetRGB() [][]byte {
	if x != nil {
		return x.RGB
	}
	return nil
}

func (x *ColorInfo) GetLegend() string {
	if x != nil {
		return x.Legend
	}
	return ""
}

type FinalDemandInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinalDemandType FinalDemandType `protobuf:"varint,1,opt,name=FinalDemandType,proto3,enum=eieiorpc.FinalDemandType" json:"FinalDemandType,omitempty"`
	EndUseMask      *Mask           `protobuf:"bytes,2,opt,name=EndUseMask,proto3" json:"EndUseMask,omitempty"`
	Year            int32           `protobuf:"varint,3,opt,name=Year,proto3" json:"Year,omitempty"`
	Location        Location        `protobuf:"varint,4,opt,name=Location,proto3,enum=eieiorpc.Location" json:"Location,omitempty"`
}

func (x *FinalDemandInput) Reset() {
	*x = FinalDemandInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eieio_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalDemandInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalDemandInput) ProtoMessage() {}

func (x *FinalDemandInput) ProtoReflect() protoreflect.Message {
	mi := &file_eieio_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalDemandInput.ProtoReflect.Descriptor instead.
func (*FinalDemandInput) Descriptor() ([]byte, []int) {
	return file_eieio_proto_rawDescGZIP(), []int{10}
}

func (x *FinalDemandInput) GetFinalDemandType() FinalDemandType {
	if x != nil {
		return x.FinalDemandType
	}
	return FinalDemandType_PersonalConsumption
}

func (x *FinalDemandInput) GetEndUseMask() *Mask {
	if x != nil {
		return x.EndUseMask
	}
	return nil
}

func (x *FinalDemandInput) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *FinalDemandInput) GetLocation() Location {
	if x != nil {
		return x.Location
	}
	return Location_Domestic
}

type DemographicConsumptionInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Demograph  *Demograph `protobuf:"bytes,1,opt,name=Demograph,proto3" json:"Demograph,omitempty"`
	EndUseMask *Mask      `protobuf:"bytes,2,opt,name=EndUseMask,proto3" json:"EndUseMask,omitempty"`
	Year       int32      `protobuf:"varint,3,opt,name=Year,proto3" json:"Year,omitempty"`
}

func (x *DemographicConsumptionInput) Reset() {
	*x = DemographicConsumptionInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eieio_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DemographicConsumptionInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DemographicConsumptionInput) ProtoMessage() {}

func (x *DemographicConsumptionInput) ProtoReflect() protoreflect.Message {
	mi := &file_eieio_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DemographicConsumptionInput.ProtoReflect.Descriptor instead.
func (*DemographicConsumptionInput) Descriptor() ([]byte, []int) {
	return file_eieio_proto_rawDescGZIP(), []int{11}
}

func (x *DemographicConsumptionInput) GetDemograph() *Demograph {
	if x != nil {
		return x.Demograph
	}
	return nil
}

func (x *DemographicConsumptionInput) GetEndUseMask() *Mask {
	if x != nil {
		return x.EndUseMask
	}
	return nil
}

func (x *DemographicConsumptionInput) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

// These are the included demographic groups.
type Demograph struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Demographic:
	//	*Demograph_Ethnicity
	//	*Demograph_Decile
	Demographic isDemograph_Demographic `protobuf_oneof:"demographic"`
}

func (x *Demograph) Reset() {
	*x = Demograph{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eieio_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Demograph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Demograph) ProtoMessage() {}

func (x *Demograph) ProtoReflect() protoreflect.Message {
	mi := &file_eieio_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Demograph.ProtoReflect.Descriptor instead.
func (*Demograph) Descriptor() ([]byte, []int) {
	return file_eieio_proto_rawDescGZIP(), []int{12}
}

func (m *Demograph) GetDemographic() isDemograph_Demographic {
	if m != nil {
		return m.Demographic
	}
	return nil
}

func (x *Demograph) GetEthnicity() Ethnicity {
	if x, ok := x.GetDemographic().(*Demograph_Ethnicity); ok {
		return x.Ethnicity
	}
	return Ethnicity_Black
}

func (x *Demograph) GetDecile() Decile {
	if x, ok := x.GetDemographic().(*Demograph_Decile); ok {
		return x.Decile
	}
	return Decile_LowestTen
}

type isDemograph_Demographic interface {
	isDemograph_Demographic()
}

type Demograph_Ethnicity struct {
	Ethnicity Ethnicity `protobuf:"varint,1,opt,name=ethnicity,proto3,enum=eieiorpc.Ethnicity,oneof"`
}

type Demograph_Decile struct {
	Decile Decile `protobuf:"varint,2,opt,name=decile,proto3,enum=eieiorpc.Decile,oneof"`
}

func (*Demograph_Ethnicity) isDemograph_Demographic() {}

func (*Demograph_Decile) isDemograph_Demographic() {}

type ConcentrationMatrixInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Demand    *Vector   `protobuf:"bytes,1,opt,name=Demand,proto3" json:"Demand,omitempty"`
	Pollutant Pollutant `protobuf:"varint,2,opt,name=Pollutant,proto3,enum=eieiorpc.Pollutant" json:"Pollutant,omitempty"`
	Year      int32     `protobuf:"varint,3,opt,name=Year,proto3" json:"Year,omitempty"`
	Location  Location  `protobuf:"varint,4,opt,name=Location,proto3,enum=eieiorpc.Location" json:"Location,omitempty"`
	AQM       string    `protobuf:"bytes,5,opt,name=AQM,proto3" json:"AQM,omitempty"`
}

func (x *ConcentrationMatrixInput) Reset() {
	*x = ConcentrationMatrixInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eieio_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConcentrationMatrixInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConcentrationMatrixInput) ProtoMessage() {}

func (x *ConcentrationMatrixInput) ProtoReflect() protoreflect.Message {
	mi := &file_eieio_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConcentrationMatrixInput.ProtoReflect.Descriptor instead.
func (*ConcentrationMatrixInput) Descriptor() ([]byte, []int) {
	return file_eieio_proto_rawDescGZIP(), []int{13}
}

func (x *ConcentrationMatrixInput) GetDemand() *Vector {
	if x != nil {
		return x.Demand
	}
	return nil
}

func (x *ConcentrationMatrixInput) GetPollutant() Pollutant {
	if x != nil {
		return x.Pollutant
	}
	return Pollutant_PNH4
}

func (x *ConcentrationMatrixInput) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ConcentrationMatrixInput) GetLocation() Location {
	if x != nil {
		return x.Location
	}
	return Location_Domestic
}

func (x *ConcentrationMatrixInput) GetAQM() string {
	if x != nil {
		return x.AQM
	}
	return ""
}

type ConcentrationInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Demand    *Vector   `protobuf:"bytes,1,opt,name=Demand,proto3" json:"Demand,omitempty"`
	Emitters  *Mask     `protobuf:"bytes,2,opt,name=Emitters,proto3" json:"Emitters,omitempty"`
	Pollutant Pollutant `protobuf:"varint,3,opt,name=Pollutant,proto3,enum=eieiorpc.Pollutant" json:"Pollutant,omitempty"`
	Year      int32     `protobuf:"varint,4,opt,name=Year,proto3" json:"Year,omitempty"`
	Location  Location  `protobuf:"varint,5,opt,name=Location,proto3,enum=eieiorpc.Location" json:"Location,omitempty"`
	AQM       string    `protobuf:"bytes,6,opt,name=AQM,proto3" json:"AQM,omitempty"`
}

func (x *ConcentrationInput) Reset() {
	*x = ConcentrationInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eieio_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConcentrationInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConcentrationInput) ProtoMessage() {}

func (x *ConcentrationInput) ProtoReflect() protoreflect.Message {
	mi := &file_eieio_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConcentrationInput.ProtoReflect.Descriptor instead.
func (*ConcentrationInput) Descriptor() ([]byte, []int) {
	return file_eieio_proto_rawDescGZIP(), []int{14}
}

func (x *ConcentrationInput) GetDemand() *Vector {
	if x != nil {
		return x.Demand
	}
	return nil
}

func (x *ConcentrationInput) GetEmitters() *Mask {
	if x != nil {
		return x.Emitters
	}
	return nil
}

func (x *ConcentrationInput) GetPollutant() Pollutant {
	if x != nil {
		return x.Pollutant
	}
	return Pollutant_PNH4
}

func (x *ConcentrationInput) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ConcentrationInput) GetLocation() Location {
	if x != nil {
		return x.Location
	}
	return Location_Domestic
}

func (x *ConcentrationInput) GetAQM() string {
	if x != nil {
		return x.AQM
	}
	return ""
}

type EmissionsMatrixInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Demand   *Vector  `protobuf:"bytes,1,opt,name=Demand,proto3" json:"Demand,omitempty"`
	Emission Emission `protobuf:"varint,2,opt,name=Emission,proto3,enum=eieiorpc.Emission" json:"Emission,omitempty"`
	Year     int32    `protobuf:"varint,3,opt,name=Year,proto3" json:"Year,omitempty"`
	Location Location `protobuf:"varint,4,opt,name=Location,proto3,enum=eieiorpc.Location" json:"Location,omitempty"`
	AQM      string   `protobuf:"bytes,5,opt,name=AQM,proto3" json:"AQM,omitempty"`
}

func (x *EmissionsMatrixInput) Reset() {
	*x = EmissionsMatrixInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eieio_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmissionsMatrixInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmissionsMatrixInput) ProtoMessage() {}

func (x *EmissionsMatrixInput) ProtoReflect() protoreflect.Message {
	mi := &file_eieio_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmissionsMatrixInput.ProtoReflect.Descriptor instead.
func (*EmissionsMatrixInput) Descriptor() ([]byte, []int) {
	return file_eieio_proto_rawDescGZIP(), []int{15}
}

func (x *EmissionsMatrixInput) GetDemand() *Vector {
	if x != nil {
		return x.Demand
	}
	return nil
}

func (x *EmissionsMatrixInput) GetEmission() Emission {
	if x != nil {
		return x.Emission
	}
	return Emission_PM25
}

func (x *EmissionsMatrixInput) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *EmissionsMatrixInput) GetLocation() Location {
	if x != nil {
		return x.Location
	}
	return Location_Domestic
}

func (x *EmissionsMatrixInput) GetAQM() string {
	if x != nil {
		return x.AQM
	}
	return ""
}

type EmissionsInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Demand   *Vector  `protobuf:"bytes,1,opt,name=Demand,proto3" json:"Demand,omitempty"`
	Emitters *Mask    `protobuf:"bytes,2,opt,name=Emitters,proto3" json:"Emitters,omitempty"`
	Emission Emission `protobuf:"varint,3,opt,name=Emission,proto3,enum=eieiorpc.Emission" json:"Emission,omitempty"`
	Year     int32    `protobuf:"varint,4,opt,name=Year,proto3" json:"Year,omitempty"`
	Location Location `protobuf:"varint,5,opt,name=Location,proto3,enum=eieiorpc.Location" json:"Location,omitempty"`
	AQM      string   `protobuf:"bytes,6,opt,name=AQM,proto3" json:"AQM,omitempty"`
}

func (x *EmissionsInput) Reset() {
	*x = EmissionsInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eieio_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmissionsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmissionsInput) ProtoMessage() {}

func (x *EmissionsInput) ProtoReflect() protoreflect.Message {
	mi := &file_eieio_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmissionsInput.ProtoReflect.Descriptor instead.
func (*EmissionsInput) Descriptor() ([]byte, []int) {
	return file_eieio_proto_rawDescGZIP(), []int{16}
}

func (x *EmissionsInput) GetDemand() *Vector {
	if x != nil {
		return x.Demand
	}
	return nil
}

func (x *EmissionsInput) GetEmitters() *Mask {
	if x != nil {
		return x.Emitters
	}
	return nil
}

func (x *EmissionsInput) GetEmission() Emission {
	if x != nil {
		return x.Emission
	}
	return Emission_PM25
}

func (x *EmissionsInput) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *EmissionsInput) GetLocation() Location {
	if x != nil {
		return x.Location
	}
	return Location_Domestic
}

func (x *EmissionsInput) GetAQM() string {
	if x != nil {
		return x.AQM
	}
	return ""
}

type HealthMatrixInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Demand     *Vector   `protobuf:"bytes,1,opt,name=Demand,proto3" json:"Demand,omitempty"`
	Pollutant  Pollutant `protobuf:"varint,2,opt,name=Pollutant,proto3,enum=eieiorpc.Pollutant" json:"Pollutant,omitempty"`
	Population string    `protobuf:"bytes,3,opt,name=Population,proto3" json:"Population,omitempty"`
	Year       int32     `protobuf:"varint,4,opt,name=Year,proto3" json:"Year,omitempty"`
	Location   Location  `protobuf:"varint,5,opt,name=Location,proto3,enum=eieiorpc.Location" json:"Location,omitempty"`
	HR         string    `protobuf:"bytes,6,opt,name=HR,proto3" json:"HR,omitempty"`
	AQM        string    `protobuf:"bytes,7,opt,name=AQM,proto3" json:"AQM,omitempty"`
}

func (x *HealthMatrixInput) Reset() {
	*x = HealthMatrixInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eieio_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthMatrixInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthMatrixInput) ProtoMessage() {}

func (x *HealthMatrixInput) ProtoReflect() protoreflect.Message {
	mi := &file_eieio_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthMatrixInput.ProtoReflect.Descriptor instead.
func (*HealthMatrixInput) Descriptor() ([]byte, []int) {
	return file_eieio_proto_rawDescGZIP(), []int{17}
}

func (x *HealthMatrixInput) GetDemand() *Vector {
	if x != nil {
		return x.Demand
	}
	return nil
}

func (x *HealthMatrixInput) GetPollutant() Pollutant {
	if x != nil {
		return x.Pollutant
	}
	return Pollutant_PNH4
}

func (x *HealthMatrixInput) GetPopulation() string {
	if x != nil {
		return x.Population
	}
	return ""
}

func (x *HealthMatrixInput) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *HealthMatrixInput) GetLocation() Location {
	if x != nil {
		return x.Location
	}
	return Location_Domestic
}

func (x *HealthMatrixInput) GetHR() string {
	if x != nil {
		return x.HR
	}
	return ""
}

func (x *HealthMatrixInput) GetAQM() string {
	if x != nil {
		return x.AQM
	}
	return ""
}

type HealthInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Demand      *Vector   `protobuf:"bytes,1,opt,name=Demand,proto3" json:"Demand,omitempty"`
	EmitterMask *Mask     `protobuf:"bytes,2,opt,name=EmitterMask,proto3" json:"EmitterMask,omitempty"`
	Pollutant   Pollutant `protobuf:"varint,3,opt,name=Pollutant,proto3,enum=eieiorpc.Pollutant" json:"Pollutant,omitempty"`
	Population  string    `protobuf:"bytes,4,opt,name=Population,proto3" json:"Population,omitempty"`
	Year        int32     `protobuf:"varint,5,opt,name=Year,proto3" json:"Year,omitempty"`
	Location    Location  `protobuf:"varint,6,opt,name=Location,proto3,enum=eieiorpc.Location" json:"Location,omitempty"`
	HR          string    `protobuf:"bytes,7,opt,name=HR,proto3" json:"HR,omitempty"`
	AQM         string    `protobuf:"bytes,8,opt,name=AQM,proto3" json:"AQM,omitempty"`
}

func (x *HealthInput) Reset() {
	*x = HealthInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eieio_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthInput) ProtoMessage() {}

func (x *HealthInput) ProtoReflect() protoreflect.Message {
	mi := &file_eieio_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthInput.ProtoReflect.Descriptor instead.
func (*HealthInput) Descriptor() ([]byte, []int) {
	return file_eieio_proto_rawDescGZIP(), []int{18}
}

func (x *HealthInput) GetDemand() *Vector {
	if x != nil {
		return x.Demand
	}
	return nil
}

func (x *HealthInput) GetEmitterMask() *Mask {
	if x != nil {
		return x.EmitterMask
	}
	return nil
}

func (x *HealthInput) GetPollutant() Pollutant {
	if x != nil {
		return x.Pollutant
	}
	return Pollutant_PNH4
}

func (x *HealthInput) GetPopulation() string {
	if x != nil {
		return x.Population
	}
	return ""
}

func (x *HealthInput) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *HealthInput) GetLocation() Location {
	if x != nil {
		return x.Location
	}
	return Location_Domestic
}

func (x *HealthInput) GetHR() string {
	if x != nil {
		return x.HR
	}
	return ""
}

func (x *HealthInput) GetAQM() string {
	if x != nil {
		return x.AQM
	}
	return ""
}

type Vector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []float64 `protobuf:"fixed64,1,rep,packed,name=Data,proto3" json:"Data,omitempty"`
}

func (x *Vector) Reset() {
	*x = Vector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eieio_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector) ProtoMessage() {}

func (x *Vector) ProtoReflect() protoreflect.Message {
	mi := &file_eieio_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector.ProtoReflect.Descriptor instead.
func (*Vector) Descriptor() ([]byte, []int) {
	return file_eieio_proto_rawDescGZIP(), []int{19}
}

func (x *Vector) GetData() []float64 {
	if x != nil {
		return x.Data
	}
	return nil
}

type Mask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []float64 `protobuf:"fixed64,1,rep,packed,name=Data,proto3" json:"Data,omitempty"`
}

func (x *Mask) Reset() {
	*x = Mask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eieio_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mask) ProtoMessage() {}

func (x *Mask) ProtoReflect() protoreflect.Message {
	mi := &file_eieio_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mask.ProtoReflect.Descriptor instead.
func (*Mask) Descriptor() ([]byte, []int) {
	return file_eieio_proto_rawDescGZIP(), []int{20}
}

func (x *Mask) GetData() []float64 {
	if x != nil {
		return x.Data
	}
	return nil
}

type Matrix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rows int32     `protobuf:"varint,1,opt,name=Rows,proto3" json:"Rows,omitempty"`
	Cols int32     `protobuf:"varint,2,opt,name=Cols,proto3" json:"Cols,omitempty"`
	Data []float64 `protobuf:"fixed64,3,rep,packed,name=Data,proto3" json:"Data,omitempty"`
}

func (x *Matrix) Reset() {
	*x = Matrix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eieio_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Matrix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Matrix) ProtoMessage() {}

func (x *Matrix) ProtoReflect() protoreflect.Message {
	mi := &file_eieio_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Matrix.ProtoReflect.Descriptor instead.
func (*Matrix) Descriptor() ([]byte, []int) {
	return file_eieio_proto_rawDescGZIP(), []int{21}
}

func (x *Matrix) GetRows() int32 {
	if x != nil {
		return x.Rows
	}
	return 0
}

func (x *Matrix) GetCols() int32 {
	if x != nil {
		return x.Cols
	}
	return 0
}

func (x *Matrix) GetData() []float64 {
	if x != nil {
		return x.Data
	}
	return nil
}

type EvaluationHealthInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year       int32     `protobuf:"varint,1,opt,name=Year,proto3" json:"Year,omitempty"`
	Pollutant  Pollutant `protobuf:"varint,2,opt,name=Pollutant,proto3,enum=eieiorpc.Pollutant" json:"Pollutant,omitempty"`
	Population string    `protobuf:"bytes,3,opt,name=Population,proto3" json:"Population,omitempty"`
	HR         string    `protobuf:"bytes,4,opt,name=HR,proto3" json:"HR,omitempty"`
	AQM        string    `protobuf:"bytes,5,opt,name=AQM,proto3" json:"AQM,omitempty"`
}

func (x *EvaluationHealthInput) Reset() {
	*x = EvaluationHealthInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eieio_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluationHealthInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluationHealthInput) ProtoMessage() {}

func (x *EvaluationHealthInput) ProtoReflect() protoreflect.Message {
	mi := &file_eieio_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluationHealthInput.ProtoReflect.Descriptor instead.
func (*EvaluationHealthInput) Descriptor() ([]byte, []int) {
	return file_eieio_proto_rawDescGZIP(), []int{22}
}

func (x *EvaluationHealthInput) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *EvaluationHealthInput) GetPollutant() Pollutant {
	if x != nil {
		return x.Pollutant
	}
	return Pollutant_PNH4
}

func (x *EvaluationHealthInput) GetPopulation() string {
	if x != nil {
		return x.Population
	}
	return ""
}

func (x *EvaluationHealthInput) GetHR() string {
	if x != nil {
		return x.HR
	}
	return ""
}

func (x *EvaluationHealthInput) GetAQM() string {
	if x != nil {
		return x.AQM
	}
	return ""
}

type EvaluationConcentrationsInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year      int32     `protobuf:"varint,1,opt,name=Year,proto3" json:"Year,omitempty"`
	Pollutant Pollutant `protobuf:"varint,2,opt,name=Pollutant,proto3,enum=eieiorpc.Pollutant" json:"Pollutant,omitempty"`
	AQM       string    `protobuf:"bytes,3,opt,name=AQM,proto3" json:"AQM,omitempty"`
}

func (x *EvaluationConcentrationsInput) Reset() {
	*x = EvaluationConcentrationsInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eieio_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluationConcentrationsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluationConcentrationsInput) ProtoMessage() {}

func (x *EvaluationConcentrationsInput) ProtoReflect() protoreflect.Message {
	mi := &file_eieio_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluationConcentrationsInput.ProtoReflect.Descriptor instead.
func (*EvaluationConcentrationsInput) Descriptor() ([]byte, []int) {
	return file_eieio_proto_rawDescGZIP(), []int{23}
}

func (x *EvaluationConcentrationsInput) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *EvaluationConcentrationsInput) GetPollutant() Pollutant {
	if x != nil {
		return x.Pollutant
	}
	return Pollutant_PNH4
}

func (x *EvaluationConcentrationsInput) GetAQM() string {
	if x != nil {
		return x.AQM
	}
	return ""
}

type ConcentrationResponseAverageInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year       int32  `protobuf:"varint,1,opt,name=Year,proto3" json:"Year,omitempty"`
	Population string `protobuf:"bytes,2,opt,name=Population,proto3" json:"Population,omitempty"`
	HR         string `protobuf:"bytes,3,opt,name=HR,proto3" json:"HR,omitempty"`
	AQM        string `protobuf:"bytes,4,opt,name=AQM,proto3" json:"AQM,omitempty"`
}

func (x *ConcentrationResponseAverageInput) Reset() {
	*x = ConcentrationResponseAverageInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eieio_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConcentrationResponseAverageInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConcentrationResponseAverageInput) ProtoMessage() {}

func (x *ConcentrationResponseAverageInput) ProtoReflect() protoreflect.Message {
	mi := &file_eieio_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConcentrationResponseAverageInput.ProtoReflect.Descriptor instead.
func (*ConcentrationResponseAverageInput) Descriptor() ([]byte, []int) {
	return file_eieio_proto_rawDescGZIP(), []int{24}
}

func (x *ConcentrationResponseAverageInput) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ConcentrationResponseAverageInput) GetPopulation() string {
	if x != nil {
		return x.Population
	}
	return ""
}

func (x *ConcentrationResponseAverageInput) GetHR() string {
	if x != nil {
		return x.HR
	}
	return ""
}

func (x *ConcentrationResponseAverageInput) GetAQM() string {
	if x != nil {
		return x.AQM
	}
	return ""
}

type PopulationCountInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year        int32  `protobuf:"varint,1,opt,name=Year,proto3" json:"Year,omitempty"`
	Population  string `protobuf:"bytes,2,opt,name=Population,proto3" json:"Population,omitempty"`
	AQM         string `protobuf:"bytes,3,opt,name=AQM,proto3" json:"AQM,omitempty"`
	IsIncomePop bool   `protobuf:"varint,4,opt,name=isIncomePop,proto3" json:"isIncomePop,omitempty"`
}

func (x *PopulationCountInput) Reset() {
	*x = PopulationCountInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eieio_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PopulationCountInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PopulationCountInput) ProtoMessage() {}

func (x *PopulationCountInput) ProtoReflect() protoreflect.Message {
	mi := &file_eieio_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PopulationCountInput.ProtoReflect.Descriptor instead.
func (*PopulationCountInput) Descriptor() ([]byte, []int) {
	return file_eieio_proto_rawDescGZIP(), []int{25}
}

func (x *PopulationCountInput) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *PopulationCountInput) GetPopulation() string {
	if x != nil {
		return x.Population
	}
	return ""
}

func (x *PopulationCountInput) GetAQM() string {
	if x != nil {
		return x.AQM
	}
	return ""
}

func (x *PopulationCountInput) GetIsIncomePop() bool {
	if x != nil {
		return x.IsIncomePop
	}
	return false
}

type PopulationCountDemInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year        int32      `protobuf:"varint,1,opt,name=Year,proto3" json:"Year,omitempty"`
	Population  *Demograph `protobuf:"bytes,2,opt,name=Population,proto3" json:"Population,omitempty"`
	AQM         string     `protobuf:"bytes,3,opt,name=AQM,proto3" json:"AQM,omitempty"`
	IsIncomePop bool       `protobuf:"varint,4,opt,name=isIncomePop,proto3" json:"isIncomePop,omitempty"`
}

func (x *PopulationCountDemInput) Reset() {
	*x = PopulationCountDemInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eieio_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PopulationCountDemInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PopulationCountDemInput) ProtoMessage() {}

func (x *PopulationCountDemInput) ProtoReflect() protoreflect.Message {
	mi := &file_eieio_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PopulationCountDemInput.ProtoReflect.Descriptor instead.
func (*PopulationCountDemInput) Descriptor() ([]byte, []int) {
	return file_eieio_proto_rawDescGZIP(), []int{26}
}

func (x *PopulationCountDemInput) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *PopulationCountDemInput) GetPopulation() *Demograph {
	if x != nil {
		return x.Population
	}
	return nil
}

func (x *PopulationCountDemInput) GetAQM() string {
	if x != nil {
		return x.AQM
	}
	return ""
}

func (x *PopulationCountDemInput) GetIsIncomePop() bool {
	if x != nil {
		return x.IsIncomePop
	}
	return false
}

type PopulationIncidenceDemInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year       int32      `protobuf:"varint,1,opt,name=Year,proto3" json:"Year,omitempty"`
	Population *Demograph `protobuf:"bytes,2,opt,name=Population,proto3" json:"Population,omitempty"`
	HR         string     `protobuf:"bytes,3,opt,name=HR,proto3" json:"HR,omitempty"`
	AQM        string     `protobuf:"bytes,4,opt,name=AQM,proto3" json:"AQM,omitempty"`
}

func (x *PopulationIncidenceDemInput) Reset() {
	*x = PopulationIncidenceDemInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eieio_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PopulationIncidenceDemInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PopulationIncidenceDemInput) ProtoMessage() {}

func (x *PopulationIncidenceDemInput) ProtoReflect() protoreflect.Message {
	mi := &file_eieio_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PopulationIncidenceDemInput.ProtoReflect.Descriptor instead.
func (*PopulationIncidenceDemInput) Descriptor() ([]byte, []int) {
	return file_eieio_proto_rawDescGZIP(), []int{27}
}

func (x *PopulationIncidenceDemInput) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *PopulationIncidenceDemInput) GetPopulation() *Demograph {
	if x != nil {
		return x.Population
	}
	return nil
}

func (x *PopulationIncidenceDemInput) GetHR() string {
	if x != nil {
		return x.HR
	}
	return ""
}

func (x *PopulationIncidenceDemInput) GetAQM() string {
	if x != nil {
		return x.AQM
	}
	return ""
}

type PopulationIncidenceDemOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Population []float64 `protobuf:"fixed64,1,rep,packed,name=Population,proto3" json:"Population,omitempty"`
	Incidence  []float64 `protobuf:"fixed64,2,rep,packed,name=Incidence,proto3" json:"Incidence,omitempty"`
}

func (x *PopulationIncidenceDemOutput) Reset() {
	*x = PopulationIncidenceDemOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eieio_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PopulationIncidenceDemOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PopulationIncidenceDemOutput) ProtoMessage() {}

func (x *PopulationIncidenceDemOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eieio_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PopulationIncidenceDemOutput.ProtoReflect.Descriptor instead.
func (*PopulationIncidenceDemOutput) Descriptor() ([]byte, []int) {
	return file_eieio_proto_rawDescGZIP(), []int{28}
}

func (x *PopulationIncidenceDemOutput) GetPopulation() []float64 {
	if x != nil {
		return x.Population
	}
	return nil
}

func (x *PopulationIncidenceDemOutput) GetIncidence() []float64 {
	if x != nil {
		return x.Incidence
	}
	return nil
}

type PopulationIncidenceInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year       int32  `protobuf:"varint,1,opt,name=Year,proto3" json:"Year,omitempty"`
	Population string `protobuf:"bytes,2,opt,name=Population,proto3" json:"Population,omitempty"`
	HR         string `protobuf:"bytes,3,opt,name=HR,proto3" json:"HR,omitempty"`
	AQM        string `protobuf:"bytes,4,opt,name=AQM,proto3" json:"AQM,omitempty"`
}

func (x *PopulationIncidenceInput) Reset() {
	*x = PopulationIncidenceInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eieio_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PopulationIncidenceInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PopulationIncidenceInput) ProtoMessage() {}

func (x *PopulationIncidenceInput) ProtoReflect() protoreflect.Message {
	mi := &file_eieio_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PopulationIncidenceInput.ProtoReflect.Descriptor instead.
func (*PopulationIncidenceInput) Descriptor() ([]byte, []int) {
	return file_eieio_proto_rawDescGZIP(), []int{29}
}

func (x *PopulationIncidenceInput) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *PopulationIncidenceInput) GetPopulation() string {
	if x != nil {
		return x.Population
	}
	return ""
}

func (x *PopulationIncidenceInput) GetHR() string {
	if x != nil {
		return x.HR
	}
	return ""
}

func (x *PopulationIncidenceInput) GetAQM() string {
	if x != nil {
		return x.AQM
	}
	return ""
}

type PopulationIncidenceOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Population []float64 `protobuf:"fixed64,1,rep,packed,name=Population,proto3" json:"Population,omitempty"`
	Incidence  []float64 `protobuf:"fixed64,2,rep,packed,name=Incidence,proto3" json:"Incidence,omitempty"`
}

func (x *PopulationIncidenceOutput) Reset() {
	*x = PopulationIncidenceOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eieio_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PopulationIncidenceOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PopulationIncidenceOutput) ProtoMessage() {}

func (x *PopulationIncidenceOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eieio_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PopulationIncidenceOutput.ProtoReflect.Descriptor instead.
func (*PopulationIncidenceOutput) Descriptor() ([]byte, []int) {
	return file_eieio_proto_rawDescGZIP(), []int{30}
}

func (x *PopulationIncidenceOutput) GetPopulation() []float64 {
	if x != nil {
		return x.Population
	}
	return nil
}

func (x *PopulationIncidenceOutput) GetIncidence() []float64 {
	if x != nil {
		return x.Incidence
	}
	return nil
}

var File_eieio_proto protoreflect.FileDescriptor

var file_eieio_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x65,
	0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x22, 0x25, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x20,
	0x0a, 0x0a, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x4f, 0x0a, 0x09, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x43, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x02, 0x52, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x22, 0xb4, 0x03, 0x0a, 0x09, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x45, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x45, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x53, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x53,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x45, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x1e, 0x0a, 0x0a, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x43, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0f, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x59, 0x65, 0x61, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x59, 0x65, 0x61, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6f, 0x70, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6f,
	0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x09, 0x50, 0x6f, 0x6c, 0x6c,
	0x75, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x65, 0x69,
	0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x75, 0x74, 0x61, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x09, 0x50, 0x6f, 0x6c, 0x6c, 0x75, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x30, 0x0a,
	0x08, 0x45, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x45, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x41, 0x51, 0x4d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x41, 0x51,
	0x4d, 0x42, 0x05, 0x0a, 0x03, 0x50, 0x6f, 0x6c, 0x22, 0x1c, 0x0a, 0x04, 0x59, 0x65, 0x61, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x59, 0x65, 0x61, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x05, 0x59, 0x65, 0x61, 0x72, 0x73, 0x22, 0x23, 0x0a, 0x05, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x0c, 0x0a, 0x01, 0x58, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x58, 0x12, 0x0c, 0x0a,
	0x01, 0x59, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x59, 0x22, 0x8f, 0x01, 0x0a, 0x09,
	0x52, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x02, 0x4c, 0x4c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63,
	0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x02, 0x4c, 0x4c, 0x12, 0x1f, 0x0a, 0x02, 0x4c, 0x52,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70,
	0x63, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x02, 0x4c, 0x52, 0x12, 0x1f, 0x0a, 0x02, 0x55,
	0x52, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x02, 0x55, 0x52, 0x12, 0x1f, 0x0a, 0x02,
	0x55, 0x4c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x02, 0x55, 0x4c, 0x22, 0x41, 0x0a,
	0x0a, 0x52, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x0a, 0x52,
	0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x63, 0x74, 0x61,
	0x6e, 0x67, 0x6c, 0x65, 0x52, 0x0a, 0x52, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x73,
	0x22, 0x4d, 0x0a, 0x0d, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x70, 0x61, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x53, 0x70, 0x61,
	0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x41, 0x51, 0x4d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x41, 0x51, 0x4d, 0x22,
	0x35, 0x0a, 0x09, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03,
	0x52, 0x47, 0x42, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x03, 0x52, 0x47, 0x42, 0x12, 0x16,
	0x0a, 0x06, 0x4c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x4c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x22, 0xcb, 0x01, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x61, 0x6c,
	0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x43, 0x0a, 0x0f, 0x46,
	0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e,
	0x46, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0f, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2e, 0x0a, 0x0a, 0x45, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e,
	0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x45, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b,
	0x12, 0x12, 0x0a, 0x04, 0x59, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x59, 0x65, 0x61, 0x72, 0x12, 0x2e, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70,
	0x63, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x94, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x6d, 0x6f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x44, 0x65, 0x6d, 0x6f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x44, 0x65, 0x6d, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x52, 0x09, 0x44, 0x65,
	0x6d, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x12, 0x2e, 0x0a, 0x0a, 0x45, 0x6e, 0x64, 0x55, 0x73,
	0x65, 0x4d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x69,
	0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x45, 0x6e, 0x64,
	0x55, 0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x59, 0x65, 0x61, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x59, 0x65, 0x61, 0x72, 0x22, 0x7b, 0x0a, 0x09, 0x44,
	0x65, 0x6d, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x12, 0x33, 0x0a, 0x09, 0x65, 0x74, 0x68, 0x6e,
	0x69, 0x63, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x65, 0x69,
	0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x74, 0x68, 0x6e, 0x69, 0x63, 0x69, 0x74, 0x79,
	0x48, 0x00, 0x52, 0x09, 0x65, 0x74, 0x68, 0x6e, 0x69, 0x63, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a,
	0x06, 0x64, 0x65, 0x63, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e,
	0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6c, 0x65, 0x48,
	0x00, 0x52, 0x06, 0x64, 0x65, 0x63, 0x69, 0x6c, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x64, 0x65, 0x6d,
	0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x22, 0xcd, 0x01, 0x0a, 0x18, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x31, 0x0a, 0x09, 0x50, 0x6f, 0x6c, 0x6c, 0x75, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f,
	0x6c, 0x6c, 0x75, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x09, 0x50, 0x6f, 0x6c, 0x6c, 0x75, 0x74, 0x61,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x59, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x59, 0x65, 0x61, 0x72, 0x12, 0x2e, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x51, 0x4d, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x41, 0x51, 0x4d, 0x22, 0xf3, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x28, 0x0a, 0x06, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x06, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x08, 0x45, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x69,
	0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x08, 0x45, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x73, 0x12, 0x31, 0x0a, 0x09, 0x50, 0x6f, 0x6c, 0x6c, 0x75, 0x74, 0x61,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x75, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x09, 0x50,
	0x6f, 0x6c, 0x6c, 0x75, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x59, 0x65, 0x61, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x59, 0x65, 0x61, 0x72, 0x12, 0x2e, 0x0a, 0x08,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x41, 0x51, 0x4d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x41, 0x51, 0x4d, 0x22, 0xc6,
	0x01, 0x0a, 0x14, 0x45, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x61, 0x74, 0x72,
	0x69, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x44, 0x65, 0x6d, 0x61, 0x6e,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x44, 0x65, 0x6d, 0x61, 0x6e,
	0x64, 0x12, 0x2e, 0x0a, 0x08, 0x45, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x45,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x45, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x59, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x59, 0x65, 0x61, 0x72, 0x12, 0x2e, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x51, 0x4d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x41, 0x51, 0x4d, 0x22, 0xec, 0x01, 0x0a, 0x0e, 0x45, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x44, 0x65,
	0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x69, 0x65,
	0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x44, 0x65,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x08, 0x45, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70,
	0x63, 0x2e, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x08, 0x45, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x2e, 0x0a, 0x08, 0x45, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x45, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x59, 0x65, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x59, 0x65, 0x61, 0x72, 0x12, 0x2e, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70,
	0x63, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x51, 0x4d, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x41, 0x51, 0x4d, 0x22, 0xf6, 0x01, 0x0a, 0x11, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x28, 0x0a, 0x06,
	0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65,
	0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06,
	0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x31, 0x0a, 0x09, 0x50, 0x6f, 0x6c, 0x6c, 0x75, 0x74,
	0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x65, 0x69, 0x65, 0x69,
	0x6f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x75, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x09,
	0x50, 0x6f, 0x6c, 0x6c, 0x75, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6f, 0x70,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50,
	0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x59, 0x65, 0x61,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x59, 0x65, 0x61, 0x72, 0x12, 0x2e, 0x0a,
	0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x48, 0x52, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x48, 0x52, 0x12, 0x10, 0x0a,
	0x03, 0x41, 0x51, 0x4d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x41, 0x51, 0x4d, 0x22,
	0xa2, 0x02, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x28, 0x0a, 0x06, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x06, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x0b, 0x45, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0b,
	0x45, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x31, 0x0a, 0x09, 0x50,
	0x6f, 0x6c, 0x6c, 0x75, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x75, 0x74,
	0x61, 0x6e, 0x74, 0x52, 0x09, 0x50, 0x6f, 0x6c, 0x6c, 0x75, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x59, 0x65, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x59, 0x65,
	0x61, 0x72, 0x12, 0x2e, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x48, 0x52, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x48, 0x52, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x51, 0x4d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x41, 0x51, 0x4d, 0x22, 0x1c, 0x0a, 0x06, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x01, 0x52, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x1a, 0x0a, 0x04, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x01, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x44,
	0x0a, 0x06, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x6f, 0x77, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x43, 0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x43, 0x6f, 0x6c, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x01, 0x52, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x22, 0xa0, 0x01, 0x0a, 0x15, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x59, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x59, 0x65,
	0x61, 0x72, 0x12, 0x31, 0x0a, 0x09, 0x50, 0x6f, 0x6c, 0x6c, 0x75, 0x74, 0x61, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63,
	0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x75, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x09, 0x50, 0x6f, 0x6c, 0x6c,
	0x75, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6f, 0x70, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x48, 0x52, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x48, 0x52, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x51, 0x4d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x41, 0x51, 0x4d, 0x22, 0x78, 0x0a, 0x1d, 0x45, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x59, 0x65, 0x61, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x59, 0x65, 0x61, 0x72, 0x12, 0x31, 0x0a, 0x09,
	0x50, 0x6f, 0x6c, 0x6c, 0x75, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x75,
	0x74, 0x61, 0x6e, 0x74, 0x52, 0x09, 0x50, 0x6f, 0x6c, 0x6c, 0x75, 0x74, 0x61, 0x6e, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x41, 0x51, 0x4d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x41, 0x51,
	0x4d, 0x22, 0x79, 0x0a, 0x21, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x59, 0x65, 0x61, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x59, 0x65, 0x61, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6f,
	0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x48, 0x52,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x48, 0x52, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x51,
	0x4d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x41, 0x51, 0x4d, 0x22, 0x7e, 0x0a, 0x14,
	0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x59, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x59, 0x65, 0x61, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6f, 0x70, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6f,
	0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x51, 0x4d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x41, 0x51, 0x4d, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73,
	0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x50, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x73, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x50, 0x6f, 0x70, 0x22, 0x96, 0x01, 0x0a,
	0x17, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x44, 0x65, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x59, 0x65, 0x61, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x59, 0x65, 0x61, 0x72, 0x12, 0x33, 0x0a, 0x0a,
	0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6d, 0x6f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x52, 0x0a, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x51, 0x4d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x41, 0x51, 0x4d, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x50,
	0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x49, 0x6e, 0x63, 0x6f,
	0x6d, 0x65, 0x50, 0x6f, 0x70, 0x22, 0x88, 0x01, 0x0a, 0x1b, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x6d,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x59, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x59, 0x65, 0x61, 0x72, 0x12, 0x33, 0x0a, 0x0a, 0x50, 0x6f, 0x70,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6d, 0x6f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x52, 0x0a, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x48, 0x52, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x48, 0x52, 0x12, 0x10,
	0x0a, 0x03, 0x41, 0x51, 0x4d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x41, 0x51, 0x4d,
	0x22, 0x5c, 0x0a, 0x1c, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x63, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x01, 0x52, 0x0a, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x01, 0x52, 0x09, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x70,
	0x0a, 0x18, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x63, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x59, 0x65,
	0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x59, 0x65, 0x61, 0x72, 0x12, 0x1e,
	0x0a, 0x0a, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x48, 0x52, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x48, 0x52, 0x12, 0x10,
	0x0a, 0x03, 0x41, 0x51, 0x4d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x41, 0x51, 0x4d,
	0x22, 0x59, 0x0a, 0x19, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x63, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x01, 0x52, 0x0a, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x01,
	0x52, 0x09, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2a, 0x52, 0x0a, 0x09, 0x50,
	0x6f, 0x6c, 0x6c, 0x75, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4e, 0x48, 0x34,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4e, 0x4f, 0x33, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x50, 0x53, 0x4f, 0x34, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x4f, 0x41, 0x10, 0x03, 0x12,
	0x0f, 0x0a, 0x0b, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x50, 0x4d, 0x32, 0x35, 0x10, 0x04,
	0x12, 0x0d, 0x0a, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x4d, 0x32, 0x35, 0x10, 0x05, 0x2a,
	0x38, 0x0a, 0x08, 0x45, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x50,
	0x4d, 0x32, 0x35, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x48, 0x33, 0x10, 0x01, 0x12, 0x07,
	0x0a, 0x03, 0x4e, 0x4f, 0x78, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x4f, 0x78, 0x10, 0x03,
	0x12, 0x07, 0x0a, 0x03, 0x56, 0x4f, 0x43, 0x10, 0x04, 0x2a, 0x31, 0x0a, 0x08, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69,
	0x63, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x10, 0x02, 0x2a, 0xbd, 0x03, 0x0a,
	0x0f, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x17, 0x0a, 0x13, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x10, 0x01,
	0x12, 0x14, 0x0a, 0x10, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x49, 0x50, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x10, 0x04, 0x12, 0x13, 0x0a,
	0x0f, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x10, 0x06, 0x12, 0x16,
	0x0a, 0x12, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73,
	0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x10, 0x08, 0x12, 0x14, 0x0a,
	0x10, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x50,
	0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x6f, 0x6e, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0b, 0x12, 0x18, 0x0a,
	0x14, 0x4e, 0x6f, 0x6e, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x6f, 0x6e, 0x64, 0x65,
	0x66, 0x65, 0x6e, 0x73, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x0d,
	0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x6f, 0x6e, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x50,
	0x10, 0x0e, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0f, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x10, 0x10, 0x12, 0x12, 0x0a,
	0x0e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x10,
	0x11, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x50, 0x10, 0x12, 0x12, 0x0d,
	0x0a, 0x09, 0x41, 0x6c, 0x6c, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x10, 0x13, 0x12, 0x0d, 0x0a,
	0x09, 0x4e, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x10, 0x14, 0x2a, 0x47, 0x0a, 0x09,
	0x45, 0x74, 0x68, 0x6e, 0x69, 0x63, 0x69, 0x74, 0x79, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x6c, 0x61,
	0x63, 0x6b, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x69, 0x73, 0x70, 0x61, 0x6e, 0x69, 0x63,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x57, 0x68, 0x69, 0x74, 0x65, 0x4f, 0x74, 0x68, 0x65, 0x72,
	0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x74, 0x68, 0x6e, 0x69, 0x63, 0x69, 0x74, 0x79, 0x5f,
	0x41, 0x6c, 0x6c, 0x10, 0x03, 0x2a, 0xdc, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x63, 0x69, 0x6c, 0x65,
	0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x54, 0x65, 0x6e, 0x10, 0x00, 0x12,
	0x13, 0x0a, 0x0f, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x4c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x54,
	0x65, 0x6e, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x68, 0x69, 0x72, 0x64, 0x4c, 0x6f, 0x77,
	0x65, 0x73, 0x74, 0x54, 0x65, 0x6e, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x6f, 0x75, 0x72,
	0x74, 0x68, 0x4c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x54, 0x65, 0x6e, 0x10, 0x03, 0x12, 0x12, 0x0a,
	0x0e, 0x46, 0x69, 0x66, 0x74, 0x68, 0x4c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x54, 0x65, 0x6e, 0x10,
	0x04, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x69, 0x78, 0x74, 0x68, 0x4c, 0x6f, 0x77, 0x65, 0x73, 0x74,
	0x54, 0x65, 0x6e, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x68,
	0x4c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x54, 0x65, 0x6e, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x45,
	0x69, 0x67, 0x68, 0x74, 0x68, 0x4c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x54, 0x65, 0x6e, 0x10, 0x07,
	0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x69, 0x6e, 0x74, 0x68, 0x4c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x54,
	0x65, 0x6e, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x54,
	0x65, 0x6e, 0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x65, 0x63, 0x69, 0x6c, 0x65, 0x5f, 0x41,
	0x6c, 0x6c, 0x10, 0x0a, 0x32, 0x88, 0x10, 0x0a, 0x08, 0x45, 0x49, 0x45, 0x49, 0x4f, 0x72, 0x70,
	0x63, 0x12, 0x3a, 0x0a, 0x0c, 0x45, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x12, 0x13, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x13, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x00, 0x12, 0x3b, 0x0a,
	0x0d, 0x45, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x13,
	0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x13, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0d, 0x45, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x13, 0x2e, 0x65, 0x69,
	0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x13, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0e, 0x45, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x13, 0x2e, 0x65, 0x69, 0x65, 0x69,
	0x6f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x13,
	0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x05, 0x59, 0x65, 0x61, 0x72, 0x73, 0x12, 0x13,
	0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x0e, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x59,
	0x65, 0x61, 0x72, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x10, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x2e, 0x65, 0x69, 0x65, 0x69,
	0x6f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x13,
	0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0b, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x13, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x13, 0x2e, 0x65, 0x69, 0x65, 0x69,
	0x6f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x00,
	0x12, 0x35, 0x0a, 0x07, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x13, 0x2e, 0x65, 0x69,
	0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x13, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x08, 0x47, 0x65, 0x6f, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x12, 0x17, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x47,
	0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x14, 0x2e, 0x65,
	0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x12,
	0x22, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x1a, 0x10, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x4d,
	0x61, 0x74, 0x72, 0x69, 0x78, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x09, 0x45, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e,
	0x45, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10,
	0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x22, 0x00, 0x12, 0x45, 0x0a, 0x0f, 0x45, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x4d,
	0x61, 0x74, 0x72, 0x69, 0x78, 0x12, 0x1e, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63,
	0x2e, 0x45, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63,
	0x2e, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x06, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x12, 0x15, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10, 0x2e, 0x65, 0x69, 0x65,
	0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x00, 0x12, 0x3f,
	0x0a, 0x0c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x12, 0x1b,
	0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10, 0x2e, 0x65, 0x69,
	0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x22, 0x00, 0x12,
	0x47, 0x0a, 0x10, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x12, 0x1f, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x45,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x18, 0x45, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e,
	0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10, 0x2e,
	0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22,
	0x00, 0x12, 0x5f, 0x0a, 0x1c, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x12, 0x2b, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10,
	0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x22, 0x00, 0x12, 0x69, 0x0a, 0x16, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x6d, 0x12, 0x25, 0x2e, 0x65,
	0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x6d, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x1a, 0x26, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x50,
	0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x44, 0x65, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x00, 0x12, 0x60, 0x0a,
	0x13, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x63, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e,
	0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x23, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x63, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x00, 0x12,
	0x3d, 0x0a, 0x0b, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1a,
	0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x44,
	0x65, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10, 0x2e, 0x65, 0x69, 0x65,
	0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x00, 0x12, 0x35,
	0x0a, 0x0a, 0x45, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x15, 0x2e, 0x65,
	0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x1a, 0x0e, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x4d,
	0x61, 0x73, 0x6b, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0b, 0x45, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x4d, 0x61, 0x73, 0x6b, 0x12, 0x15, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x0e, 0x2e, 0x65, 0x69,
	0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x00, 0x12, 0x41, 0x0a,
	0x10, 0x45, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x15, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x14, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00,
	0x12, 0x43, 0x0a, 0x12, 0x45, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41,
	0x62, 0x62, 0x72, 0x65, 0x76, 0x73, 0x12, 0x15, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x14, 0x2e,
	0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x11, 0x45, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x15, 0x2e, 0x65, 0x69, 0x65,
	0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x1a, 0x14, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x13, 0x45, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x62, 0x62, 0x72, 0x65, 0x76, 0x73,
	0x12, 0x15, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x14, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12,
	0x3c, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x15,
	0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x14, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x3b, 0x0a,
	0x0a, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x15, 0x2e, 0x65, 0x69,
	0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x1a, 0x14, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x16, 0x44, 0x65,
	0x6d, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e,
	0x44, 0x65, 0x6d, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10, 0x2e, 0x65, 0x69,
	0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x00, 0x42,
	0x0d, 0x5a, 0x0b, 0x2e, 0x2f, 0x3b, 0x65, 0x69, 0x65, 0x69, 0x6f, 0x72, 0x70, 0x63, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_eieio_proto_rawDescOnce sync.Once
	file_eieio_proto_rawDescData = file_eieio_proto_rawDesc
)

func file_eieio_proto_rawDescGZIP() []byte {
	file_eieio_proto_rawDescOnce.Do(func() {
		file_eieio_proto_rawDescData = protoimpl.X.CompressGZIP(file_eieio_proto_rawDescData)
	})
	return file_eieio_proto_rawDescData
}

var file_eieio_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_eieio_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_eieio_proto_goTypes = []interface{}{
	(Pollutant)(0),                            // 0: eieiorpc.Pollutant
	(Emission)(0),                             // 1: eieiorpc.Emission
	(Location)(0),                             // 2: eieiorpc.Location
	(FinalDemandType)(0),                      // 3: eieiorpc.FinalDemandType
	(Ethnicity)(0),                            // 4: eieiorpc.Ethnicity
	(Decile)(0),                               // 5: eieiorpc.Decile
	(*StringInput)(nil),                       // 6: eieiorpc.StringInput
	(*StringList)(nil),                        // 7: eieiorpc.StringList
	(*Selectors)(nil),                         // 8: eieiorpc.Selectors
	(*Selection)(nil),                         // 9: eieiorpc.Selection
	(*Year)(nil),                              // 10: eieiorpc.Year
	(*Point)(nil),                             // 11: eieiorpc.Point
	(*Rectangle)(nil),                         // 12: eieiorpc.Rectangle
	(*Rectangles)(nil),                        // 13: eieiorpc.Rectangles
	(*GeometryInput)(nil),                     // 14: eieiorpc.GeometryInput
	(*ColorInfo)(nil),                         // 15: eieiorpc.ColorInfo
	(*FinalDemandInput)(nil),                  // 16: eieiorpc.FinalDemandInput
	(*DemographicConsumptionInput)(nil),       // 17: eieiorpc.DemographicConsumptionInput
	(*Demograph)(nil),                         // 18: eieiorpc.Demograph
	(*ConcentrationMatrixInput)(nil),          // 19: eieiorpc.ConcentrationMatrixInput
	(*ConcentrationInput)(nil),                // 20: eieiorpc.ConcentrationInput
	(*EmissionsMatrixInput)(nil),              // 21: eieiorpc.EmissionsMatrixInput
	(*EmissionsInput)(nil),                    // 22: eieiorpc.EmissionsInput
	(*HealthMatrixInput)(nil),                 // 23: eieiorpc.HealthMatrixInput
	(*HealthInput)(nil),                       // 24: eieiorpc.HealthInput
	(*Vector)(nil),                            // 25: eieiorpc.Vector
	(*Mask)(nil),                              // 26: eieiorpc.Mask
	(*Matrix)(nil),                            // 27: eieiorpc.Matrix
	(*EvaluationHealthInput)(nil),             // 28: eieiorpc.EvaluationHealthInput
	(*EvaluationConcentrationsInput)(nil),     // 29: eieiorpc.EvaluationConcentrationsInput
	(*ConcentrationResponseAverageInput)(nil), // 30: eieiorpc.ConcentrationResponseAverageInput
	(*PopulationCountInput)(nil),              // 31: eieiorpc.PopulationCountInput
	(*PopulationCountDemInput)(nil),           // 32: eieiorpc.PopulationCountDemInput
	(*PopulationIncidenceDemInput)(nil),       // 33: eieiorpc.PopulationIncidenceDemInput
	(*PopulationIncidenceDemOutput)(nil),      // 34: eieiorpc.PopulationIncidenceDemOutput
	(*PopulationIncidenceInput)(nil),          // 35: eieiorpc.PopulationIncidenceInput
	(*PopulationIncidenceOutput)(nil),         // 36: eieiorpc.PopulationIncidenceOutput
}
var file_eieio_proto_depIdxs = []int32{
	3,  // 0: eieiorpc.Selection.FinalDemandType:type_name -> eieiorpc.FinalDemandType
	0,  // 1: eieiorpc.Selection.Pollutant:type_name -> eieiorpc.Pollutant
	1,  // 2: eieiorpc.Selection.Emission:type_name -> eieiorpc.Emission
	11, // 3: eieiorpc.Rectangle.LL:type_name -> eieiorpc.Point
	11, // 4: eieiorpc.Rectangle.LR:type_name -> eieiorpc.Point
	11, // 5: eieiorpc.Rectangle.UR:type_name -> eieiorpc.Point
	11, // 6: eieiorpc.Rectangle.UL:type_name -> eieiorpc.Point
	12, // 7: eieiorpc.Rectangles.Rectangles:type_name -> eieiorpc.Rectangle
	3,  // 8: eieiorpc.FinalDemandInput.FinalDemandType:type_name -> eieiorpc.FinalDemandType
	26, // 9: eieiorpc.FinalDemandInput.EndUseMask:type_name -> eieiorpc.Mask
	2,  // 10: eieiorpc.FinalDemandInput.Location:type_name -> eieiorpc.Location
	18, // 11: eieiorpc.DemographicConsumptionInput.Demograph:type_name -> eieiorpc.Demograph
	26, // 12: eieiorpc.DemographicConsumptionInput.EndUseMask:type_name -> eieiorpc.Mask
	4,  // 13: eieiorpc.Demograph.ethnicity:type_name -> eieiorpc.Ethnicity
	5,  // 14: eieiorpc.Demograph.decile:type_name -> eieiorpc.Decile
	25, // 15: eieiorpc.ConcentrationMatrixInput.Demand:type_name -> eieiorpc.Vector
	0,  // 16: eieiorpc.ConcentrationMatrixInput.Pollutant:type_name -> eieiorpc.Pollutant
	2,  // 17: eieiorpc.ConcentrationMatrixInput.Location:type_name -> eieiorpc.Location
	25, // 18: eieiorpc.ConcentrationInput.Demand:type_name -> eieiorpc.Vector
	26, // 19: eieiorpc.ConcentrationInput.Emitters:type_name -> eieiorpc.Mask
	0,  // 20: eieiorpc.ConcentrationInput.Pollutant:type_name -> eieiorpc.Pollutant
	2,  // 21: eieiorpc.ConcentrationInput.Location:type_name -> eieiorpc.Location
	25, // 22: eieiorpc.EmissionsMatrixInput.Demand:type_name -> eieiorpc.Vector
	1,  // 23: eieiorpc.EmissionsMatrixInput.Emission:type_name -> eieiorpc.Emission
	2,  // 24: eieiorpc.EmissionsMatrixInput.Location:type_name -> eieiorpc.Location
	25, // 25: eieiorpc.EmissionsInput.Demand:type_name -> eieiorpc.Vector
	26, // 26: eieiorpc.EmissionsInput.Emitters:type_name -> eieiorpc.Mask
	1,  // 27: eieiorpc.EmissionsInput.Emission:type_name -> eieiorpc.Emission
	2,  // 28: eieiorpc.EmissionsInput.Location:type_name -> eieiorpc.Location
	25, // 29: eieiorpc.HealthMatrixInput.Demand:type_name -> eieiorpc.Vector
	0,  // 30: eieiorpc.HealthMatrixInput.Pollutant:type_name -> eieiorpc.Pollutant
	2,  // 31: eieiorpc.HealthMatrixInput.Location:type_name -> eieiorpc.Location
	25, // 32: eieiorpc.HealthInput.Demand:type_name -> eieiorpc.Vector
	26, // 33: eieiorpc.HealthInput.EmitterMask:type_name -> eieiorpc.Mask
	0,  // 34: eieiorpc.HealthInput.Pollutant:type_name -> eieiorpc.Pollutant
	2,  // 35: eieiorpc.HealthInput.Location:type_name -> eieiorpc.Location
	0,  // 36: eieiorpc.EvaluationHealthInput.Pollutant:type_name -> eieiorpc.Pollutant
	0,  // 37: eieiorpc.EvaluationConcentrationsInput.Pollutant:type_name -> eieiorpc.Pollutant
	18, // 38: eieiorpc.PopulationCountDemInput.Population:type_name -> eieiorpc.Demograph
	18, // 39: eieiorpc.PopulationIncidenceDemInput.Population:type_name -> eieiorpc.Demograph
	9,  // 40: eieiorpc.EIEIOrpc.EndUseGroups:input_type -> eieiorpc.Selection
	9,  // 41: eieiorpc.EIEIOrpc.EndUseSectors:input_type -> eieiorpc.Selection
	9,  // 42: eieiorpc.EIEIOrpc.EmitterGroups:input_type -> eieiorpc.Selection
	9,  // 43: eieiorpc.EIEIOrpc.EmitterSectors:input_type -> eieiorpc.Selection
	9,  // 44: eieiorpc.EIEIOrpc.Years:input_type -> eieiorpc.Selection
	9,  // 45: eieiorpc.EIEIOrpc.DefaultSelection:input_type -> eieiorpc.Selection
	9,  // 46: eieiorpc.EIEIOrpc.Populations:input_type -> eieiorpc.Selection
	9,  // 47: eieiorpc.EIEIOrpc.MapInfo:input_type -> eieiorpc.Selection
	14, // 48: eieiorpc.EIEIOrpc.Geometry:input_type -> eieiorpc.GeometryInput
	20, // 49: eieiorpc.EIEIOrpc.Concentrations:input_type -> eieiorpc.ConcentrationInput
	19, // 50: eieiorpc.EIEIOrpc.ConcentrationMatrix:input_type -> eieiorpc.ConcentrationMatrixInput
	22, // 51: eieiorpc.EIEIOrpc.Emissions:input_type -> eieiorpc.EmissionsInput
	21, // 52: eieiorpc.EIEIOrpc.EmissionsMatrix:input_type -> eieiorpc.EmissionsMatrixInput
	24, // 53: eieiorpc.EIEIOrpc.Health:input_type -> eieiorpc.HealthInput
	23, // 54: eieiorpc.EIEIOrpc.HealthMatrix:input_type -> eieiorpc.HealthMatrixInput
	28, // 55: eieiorpc.EIEIOrpc.EvaluationHealth:input_type -> eieiorpc.EvaluationHealthInput
	29, // 56: eieiorpc.EIEIOrpc.EvaluationConcentrations:input_type -> eieiorpc.EvaluationConcentrationsInput
	30, // 57: eieiorpc.EIEIOrpc.ConcentrationResponseAverage:input_type -> eieiorpc.ConcentrationResponseAverageInput
	33, // 58: eieiorpc.EIEIOrpc.PopulationIncidenceDem:input_type -> eieiorpc.PopulationIncidenceDemInput
	35, // 59: eieiorpc.EIEIOrpc.PopulationIncidence:input_type -> eieiorpc.PopulationIncidenceInput
	16, // 60: eieiorpc.EIEIOrpc.FinalDemand:input_type -> eieiorpc.FinalDemandInput
	6,  // 61: eieiorpc.EIEIOrpc.EndUseMask:input_type -> eieiorpc.StringInput
	6,  // 62: eieiorpc.EIEIOrpc.EmitterMask:input_type -> eieiorpc.StringInput
	6,  // 63: eieiorpc.EIEIOrpc.EndUseGroupNames:input_type -> eieiorpc.StringInput
	6,  // 64: eieiorpc.EIEIOrpc.EndUseGroupAbbrevs:input_type -> eieiorpc.StringInput
	6,  // 65: eieiorpc.EIEIOrpc.EmitterGroupNames:input_type -> eieiorpc.StringInput
	6,  // 66: eieiorpc.EIEIOrpc.EmitterGroupAbbrevs:input_type -> eieiorpc.StringInput
	6,  // 67: eieiorpc.EIEIOrpc.Commodities:input_type -> eieiorpc.StringInput
	6,  // 68: eieiorpc.EIEIOrpc.Industries:input_type -> eieiorpc.StringInput
	17, // 69: eieiorpc.EIEIOrpc.DemographicConsumption:input_type -> eieiorpc.DemographicConsumptionInput
	8,  // 70: eieiorpc.EIEIOrpc.EndUseGroups:output_type -> eieiorpc.Selectors
	8,  // 71: eieiorpc.EIEIOrpc.EndUseSectors:output_type -> eieiorpc.Selectors
	8,  // 72: eieiorpc.EIEIOrpc.EmitterGroups:output_type -> eieiorpc.Selectors
	8,  // 73: eieiorpc.EIEIOrpc.EmitterSectors:output_type -> eieiorpc.Selectors
	10, // 74: eieiorpc.EIEIOrpc.Years:output_type -> eieiorpc.Year
	9,  // 75: eieiorpc.EIEIOrpc.DefaultSelection:output_type -> eieiorpc.Selection
	8,  // 76: eieiorpc.EIEIOrpc.Populations:output_type -> eieiorpc.Selectors
	15, // 77: eieiorpc.EIEIOrpc.MapInfo:output_type -> eieiorpc.ColorInfo
	13, // 78: eieiorpc.EIEIOrpc.Geometry:output_type -> eieiorpc.Rectangles
	25, // 79: eieiorpc.EIEIOrpc.Concentrations:output_type -> eieiorpc.Vector
	27, // 80: eieiorpc.EIEIOrpc.ConcentrationMatrix:output_type -> eieiorpc.Matrix
	25, // 81: eieiorpc.EIEIOrpc.Emissions:output_type -> eieiorpc.Vector
	27, // 82: eieiorpc.EIEIOrpc.EmissionsMatrix:output_type -> eieiorpc.Matrix
	25, // 83: eieiorpc.EIEIOrpc.Health:output_type -> eieiorpc.Vector
	27, // 84: eieiorpc.EIEIOrpc.HealthMatrix:output_type -> eieiorpc.Matrix
	25, // 85: eieiorpc.EIEIOrpc.EvaluationHealth:output_type -> eieiorpc.Vector
	25, // 86: eieiorpc.EIEIOrpc.EvaluationConcentrations:output_type -> eieiorpc.Vector
	25, // 87: eieiorpc.EIEIOrpc.ConcentrationResponseAverage:output_type -> eieiorpc.Vector
	34, // 88: eieiorpc.EIEIOrpc.PopulationIncidenceDem:output_type -> eieiorpc.PopulationIncidenceDemOutput
	36, // 89: eieiorpc.EIEIOrpc.PopulationIncidence:output_type -> eieiorpc.PopulationIncidenceOutput
	25, // 90: eieiorpc.EIEIOrpc.FinalDemand:output_type -> eieiorpc.Vector
	26, // 91: eieiorpc.EIEIOrpc.EndUseMask:output_type -> eieiorpc.Mask
	26, // 92: eieiorpc.EIEIOrpc.EmitterMask:output_type -> eieiorpc.Mask
	7,  // 93: eieiorpc.EIEIOrpc.EndUseGroupNames:output_type -> eieiorpc.StringList
	7,  // 94: eieiorpc.EIEIOrpc.EndUseGroupAbbrevs:output_type -> eieiorpc.StringList
	7,  // 95: eieiorpc.EIEIOrpc.EmitterGroupNames:output_type -> eieiorpc.StringList
	7,  // 96: eieiorpc.EIEIOrpc.EmitterGroupAbbrevs:output_type -> eieiorpc.StringList
	7,  // 97: eieiorpc.EIEIOrpc.Commodities:output_type -> eieiorpc.StringList
	7,  // 98: eieiorpc.EIEIOrpc.Industries:output_type -> eieiorpc.StringList
	25, // 99: eieiorpc.EIEIOrpc.DemographicConsumption:output_type -> eieiorpc.Vector
	70, // [70:100] is the sub-list for method output_type
	40, // [40:70] is the sub-list for method input_type
	40, // [40:40] is the sub-list for extension type_name
	40, // [40:40] is the sub-list for extension extendee
	0,  // [0:40] is the sub-list for field type_name
}

func init() { file_eieio_proto_init() }
func file_eieio_proto_init() {
	if File_eieio_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_eieio_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eieio_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eieio_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Selectors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eieio_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Selection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eieio_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Year); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eieio_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Point); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eieio_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rectangle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eieio_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rectangles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eieio_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeometryInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eieio_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eieio_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalDemandInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eieio_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DemographicConsumptionInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eieio_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Demograph); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eieio_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConcentrationMatrixInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eieio_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConcentrationInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eieio_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmissionsMatrixInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eieio_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmissionsInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eieio_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthMatrixInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eieio_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eieio_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eieio_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eieio_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Matrix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eieio_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluationHealthInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eieio_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluationConcentrationsInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eieio_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConcentrationResponseAverageInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eieio_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PopulationCountInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eieio_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PopulationCountDemInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eieio_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PopulationIncidenceDemInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eieio_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PopulationIncidenceDemOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eieio_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PopulationIncidenceInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eieio_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PopulationIncidenceOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_eieio_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Selection_Pollutant)(nil),
		(*Selection_Emission)(nil),
	}
	file_eieio_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*Demograph_Ethnicity)(nil),
		(*Demograph_Decile)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_eieio_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_eieio_proto_goTypes,
		DependencyIndexes: file_eieio_proto_depIdxs,
		EnumInfos:         file_eieio_proto_enumTypes,
		MessageInfos:      file_eieio_proto_msgTypes,
	}.Build()
	File_eieio_proto = out.File
	file_eieio_proto_rawDesc = nil
	file_eieio_proto_goTypes = nil
	file_eieio_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EIEIOrpcClient is the client API for EIEIOrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EIEIOrpcClient interface {
	EndUseGroups(ctx context.Context, in *Selection, opts ...grpc.CallOption) (*Selectors, error)
	EndUseSectors(ctx context.Context, in *Selection, opts ...grpc.CallOption) (*Selectors, error)
	EmitterGroups(ctx context.Context, in *Selection, opts ...grpc.CallOption) (*Selectors, error)
	EmitterSectors(ctx context.Context, in *Selection, opts ...grpc.CallOption) (*Selectors, error)
	Years(ctx context.Context, in *Selection, opts ...grpc.CallOption) (*Year, error)
	DefaultSelection(ctx context.Context, in *Selection, opts ...grpc.CallOption) (*Selection, error)
	Populations(ctx context.Context, in *Selection, opts ...grpc.CallOption) (*Selectors, error)
	MapInfo(ctx context.Context, in *Selection, opts ...grpc.CallOption) (*ColorInfo, error)
	Geometry(ctx context.Context, in *GeometryInput, opts ...grpc.CallOption) (*Rectangles, error)
	Concentrations(ctx context.Context, in *ConcentrationInput, opts ...grpc.CallOption) (*Vector, error)
	ConcentrationMatrix(ctx context.Context, in *ConcentrationMatrixInput, opts ...grpc.CallOption) (*Matrix, error)
	Emissions(ctx context.Context, in *EmissionsInput, opts ...grpc.CallOption) (*Vector, error)
	EmissionsMatrix(ctx context.Context, in *EmissionsMatrixInput, opts ...grpc.CallOption) (*Matrix, error)
	Health(ctx context.Context, in *HealthInput, opts ...grpc.CallOption) (*Vector, error)
	HealthMatrix(ctx context.Context, in *HealthMatrixInput, opts ...grpc.CallOption) (*Matrix, error)
	EvaluationHealth(ctx context.Context, in *EvaluationHealthInput, opts ...grpc.CallOption) (*Vector, error)
	EvaluationConcentrations(ctx context.Context, in *EvaluationConcentrationsInput, opts ...grpc.CallOption) (*Vector, error)
	ConcentrationResponseAverage(ctx context.Context, in *ConcentrationResponseAverageInput, opts ...grpc.CallOption) (*Vector, error)
	PopulationIncidenceDem(ctx context.Context, in *PopulationIncidenceDemInput, opts ...grpc.CallOption) (*PopulationIncidenceDemOutput, error)
	PopulationIncidence(ctx context.Context, in *PopulationIncidenceInput, opts ...grpc.CallOption) (*PopulationIncidenceOutput, error)
	FinalDemand(ctx context.Context, in *FinalDemandInput, opts ...grpc.CallOption) (*Vector, error)
	EndUseMask(ctx context.Context, in *StringInput, opts ...grpc.CallOption) (*Mask, error)
	EmitterMask(ctx context.Context, in *StringInput, opts ...grpc.CallOption) (*Mask, error)
	EndUseGroupNames(ctx context.Context, in *StringInput, opts ...grpc.CallOption) (*StringList, error)
	EndUseGroupAbbrevs(ctx context.Context, in *StringInput, opts ...grpc.CallOption) (*StringList, error)
	EmitterGroupNames(ctx context.Context, in *StringInput, opts ...grpc.CallOption) (*StringList, error)
	EmitterGroupAbbrevs(ctx context.Context, in *StringInput, opts ...grpc.CallOption) (*StringList, error)
	Commodities(ctx context.Context, in *StringInput, opts ...grpc.CallOption) (*StringList, error)
	Industries(ctx context.Context, in *StringInput, opts ...grpc.CallOption) (*StringList, error)
	DemographicConsumption(ctx context.Context, in *DemographicConsumptionInput, opts ...grpc.CallOption) (*Vector, error)
}

type eIEIOrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewEIEIOrpcClient(cc grpc.ClientConnInterface) EIEIOrpcClient {
	return &eIEIOrpcClient{cc}
}

func (c *eIEIOrpcClient) EndUseGroups(ctx context.Context, in *Selection, opts ...grpc.CallOption) (*Selectors, error) {
	out := new(Selectors)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/EndUseGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) EndUseSectors(ctx context.Context, in *Selection, opts ...grpc.CallOption) (*Selectors, error) {
	out := new(Selectors)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/EndUseSectors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) EmitterGroups(ctx context.Context, in *Selection, opts ...grpc.CallOption) (*Selectors, error) {
	out := new(Selectors)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/EmitterGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) EmitterSectors(ctx context.Context, in *Selection, opts ...grpc.CallOption) (*Selectors, error) {
	out := new(Selectors)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/EmitterSectors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) Years(ctx context.Context, in *Selection, opts ...grpc.CallOption) (*Year, error) {
	out := new(Year)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/Years", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) DefaultSelection(ctx context.Context, in *Selection, opts ...grpc.CallOption) (*Selection, error) {
	out := new(Selection)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/DefaultSelection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) Populations(ctx context.Context, in *Selection, opts ...grpc.CallOption) (*Selectors, error) {
	out := new(Selectors)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/Populations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) MapInfo(ctx context.Context, in *Selection, opts ...grpc.CallOption) (*ColorInfo, error) {
	out := new(ColorInfo)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/MapInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) Geometry(ctx context.Context, in *GeometryInput, opts ...grpc.CallOption) (*Rectangles, error) {
	out := new(Rectangles)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/Geometry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) Concentrations(ctx context.Context, in *ConcentrationInput, opts ...grpc.CallOption) (*Vector, error) {
	out := new(Vector)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/Concentrations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) ConcentrationMatrix(ctx context.Context, in *ConcentrationMatrixInput, opts ...grpc.CallOption) (*Matrix, error) {
	out := new(Matrix)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/ConcentrationMatrix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) Emissions(ctx context.Context, in *EmissionsInput, opts ...grpc.CallOption) (*Vector, error) {
	out := new(Vector)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/Emissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) EmissionsMatrix(ctx context.Context, in *EmissionsMatrixInput, opts ...grpc.CallOption) (*Matrix, error) {
	out := new(Matrix)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/EmissionsMatrix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) Health(ctx context.Context, in *HealthInput, opts ...grpc.CallOption) (*Vector, error) {
	out := new(Vector)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) HealthMatrix(ctx context.Context, in *HealthMatrixInput, opts ...grpc.CallOption) (*Matrix, error) {
	out := new(Matrix)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/HealthMatrix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) EvaluationHealth(ctx context.Context, in *EvaluationHealthInput, opts ...grpc.CallOption) (*Vector, error) {
	out := new(Vector)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/EvaluationHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) EvaluationConcentrations(ctx context.Context, in *EvaluationConcentrationsInput, opts ...grpc.CallOption) (*Vector, error) {
	out := new(Vector)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/EvaluationConcentrations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) ConcentrationResponseAverage(ctx context.Context, in *ConcentrationResponseAverageInput, opts ...grpc.CallOption) (*Vector, error) {
	out := new(Vector)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/ConcentrationResponseAverage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) PopulationIncidenceDem(ctx context.Context, in *PopulationIncidenceDemInput, opts ...grpc.CallOption) (*PopulationIncidenceDemOutput, error) {
	out := new(PopulationIncidenceDemOutput)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/PopulationIncidenceDem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) PopulationIncidence(ctx context.Context, in *PopulationIncidenceInput, opts ...grpc.CallOption) (*PopulationIncidenceOutput, error) {
	out := new(PopulationIncidenceOutput)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/PopulationIncidence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) FinalDemand(ctx context.Context, in *FinalDemandInput, opts ...grpc.CallOption) (*Vector, error) {
	out := new(Vector)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/FinalDemand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) EndUseMask(ctx context.Context, in *StringInput, opts ...grpc.CallOption) (*Mask, error) {
	out := new(Mask)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/EndUseMask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) EmitterMask(ctx context.Context, in *StringInput, opts ...grpc.CallOption) (*Mask, error) {
	out := new(Mask)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/EmitterMask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) EndUseGroupNames(ctx context.Context, in *StringInput, opts ...grpc.CallOption) (*StringList, error) {
	out := new(StringList)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/EndUseGroupNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) EndUseGroupAbbrevs(ctx context.Context, in *StringInput, opts ...grpc.CallOption) (*StringList, error) {
	out := new(StringList)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/EndUseGroupAbbrevs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) EmitterGroupNames(ctx context.Context, in *StringInput, opts ...grpc.CallOption) (*StringList, error) {
	out := new(StringList)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/EmitterGroupNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) EmitterGroupAbbrevs(ctx context.Context, in *StringInput, opts ...grpc.CallOption) (*StringList, error) {
	out := new(StringList)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/EmitterGroupAbbrevs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) Commodities(ctx context.Context, in *StringInput, opts ...grpc.CallOption) (*StringList, error) {
	out := new(StringList)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/Commodities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) Industries(ctx context.Context, in *StringInput, opts ...grpc.CallOption) (*StringList, error) {
	out := new(StringList)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/Industries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) DemographicConsumption(ctx context.Context, in *DemographicConsumptionInput, opts ...grpc.CallOption) (*Vector, error) {
	out := new(Vector)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/DemographicConsumption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EIEIOrpcServer is the server API for EIEIOrpc service.
type EIEIOrpcServer interface {
	EndUseGroups(context.Context, *Selection) (*Selectors, error)
	EndUseSectors(context.Context, *Selection) (*Selectors, error)
	EmitterGroups(context.Context, *Selection) (*Selectors, error)
	EmitterSectors(context.Context, *Selection) (*Selectors, error)
	Years(context.Context, *Selection) (*Year, error)
	DefaultSelection(context.Context, *Selection) (*Selection, error)
	Populations(context.Context, *Selection) (*Selectors, error)
	MapInfo(context.Context, *Selection) (*ColorInfo, error)
	Geometry(context.Context, *GeometryInput) (*Rectangles, error)
	Concentrations(context.Context, *ConcentrationInput) (*Vector, error)
	ConcentrationMatrix(context.Context, *ConcentrationMatrixInput) (*Matrix, error)
	Emissions(context.Context, *EmissionsInput) (*Vector, error)
	EmissionsMatrix(context.Context, *EmissionsMatrixInput) (*Matrix, error)
	Health(context.Context, *HealthInput) (*Vector, error)
	HealthMatrix(context.Context, *HealthMatrixInput) (*Matrix, error)
	EvaluationHealth(context.Context, *EvaluationHealthInput) (*Vector, error)
	EvaluationConcentrations(context.Context, *EvaluationConcentrationsInput) (*Vector, error)
	ConcentrationResponseAverage(context.Context, *ConcentrationResponseAverageInput) (*Vector, error)
	PopulationIncidenceDem(context.Context, *PopulationIncidenceDemInput) (*PopulationIncidenceDemOutput, error)
	PopulationIncidence(context.Context, *PopulationIncidenceInput) (*PopulationIncidenceOutput, error)
	FinalDemand(context.Context, *FinalDemandInput) (*Vector, error)
	EndUseMask(context.Context, *StringInput) (*Mask, error)
	EmitterMask(context.Context, *StringInput) (*Mask, error)
	EndUseGroupNames(context.Context, *StringInput) (*StringList, error)
	EndUseGroupAbbrevs(context.Context, *StringInput) (*StringList, error)
	EmitterGroupNames(context.Context, *StringInput) (*StringList, error)
	EmitterGroupAbbrevs(context.Context, *StringInput) (*StringList, error)
	Commodities(context.Context, *StringInput) (*StringList, error)
	Industries(context.Context, *StringInput) (*StringList, error)
	DemographicConsumption(context.Context, *DemographicConsumptionInput) (*Vector, error)
}

// UnimplementedEIEIOrpcServer can be embedded to have forward compatible implementations.
type UnimplementedEIEIOrpcServer struct {
}

func (*UnimplementedEIEIOrpcServer) EndUseGroups(context.Context, *Selection) (*Selectors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndUseGroups not implemented")
}
func (*UnimplementedEIEIOrpcServer) EndUseSectors(context.Context, *Selection) (*Selectors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndUseSectors not implemented")
}
func (*UnimplementedEIEIOrpcServer) EmitterGroups(context.Context, *Selection) (*Selectors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmitterGroups not implemented")
}
func (*UnimplementedEIEIOrpcServer) EmitterSectors(context.Context, *Selection) (*Selectors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmitterSectors not implemented")
}
func (*UnimplementedEIEIOrpcServer) Years(context.Context, *Selection) (*Year, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Years not implemented")
}
func (*UnimplementedEIEIOrpcServer) DefaultSelection(context.Context, *Selection) (*Selection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DefaultSelection not implemented")
}
func (*UnimplementedEIEIOrpcServer) Populations(context.Context, *Selection) (*Selectors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Populations not implemented")
}
func (*UnimplementedEIEIOrpcServer) MapInfo(context.Context, *Selection) (*ColorInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MapInfo not implemented")
}
func (*UnimplementedEIEIOrpcServer) Geometry(context.Context, *GeometryInput) (*Rectangles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Geometry not implemented")
}
func (*UnimplementedEIEIOrpcServer) Concentrations(context.Context, *ConcentrationInput) (*Vector, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Concentrations not implemented")
}
func (*UnimplementedEIEIOrpcServer) ConcentrationMatrix(context.Context, *ConcentrationMatrixInput) (*Matrix, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConcentrationMatrix not implemented")
}
func (*UnimplementedEIEIOrpcServer) Emissions(context.Context, *EmissionsInput) (*Vector, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Emissions not implemented")
}
func (*UnimplementedEIEIOrpcServer) EmissionsMatrix(context.Context, *EmissionsMatrixInput) (*Matrix, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmissionsMatrix not implemented")
}
func (*UnimplementedEIEIOrpcServer) Health(context.Context, *HealthInput) (*Vector, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (*UnimplementedEIEIOrpcServer) HealthMatrix(context.Context, *HealthMatrixInput) (*Matrix, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthMatrix not implemented")
}
func (*UnimplementedEIEIOrpcServer) EvaluationHealth(context.Context, *EvaluationHealthInput) (*Vector, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvaluationHealth not implemented")
}
func (*UnimplementedEIEIOrpcServer) EvaluationConcentrations(context.Context, *EvaluationConcentrationsInput) (*Vector, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvaluationConcentrations not implemented")
}
func (*UnimplementedEIEIOrpcServer) ConcentrationResponseAverage(context.Context, *ConcentrationResponseAverageInput) (*Vector, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConcentrationResponseAverage not implemented")
}
func (*UnimplementedEIEIOrpcServer) PopulationIncidenceDem(context.Context, *PopulationIncidenceDemInput) (*PopulationIncidenceDemOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PopulationIncidenceDem not implemented")
}
func (*UnimplementedEIEIOrpcServer) PopulationIncidence(context.Context, *PopulationIncidenceInput) (*PopulationIncidenceOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PopulationIncidence not implemented")
}
func (*UnimplementedEIEIOrpcServer) FinalDemand(context.Context, *FinalDemandInput) (*Vector, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalDemand not implemented")
}
func (*UnimplementedEIEIOrpcServer) EndUseMask(context.Context, *StringInput) (*Mask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndUseMask not implemented")
}
func (*UnimplementedEIEIOrpcServer) EmitterMask(context.Context, *StringInput) (*Mask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmitterMask not implemented")
}
func (*UnimplementedEIEIOrpcServer) EndUseGroupNames(context.Context, *StringInput) (*StringList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndUseGroupNames not implemented")
}
func (*UnimplementedEIEIOrpcServer) EndUseGroupAbbrevs(context.Context, *StringInput) (*StringList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndUseGroupAbbrevs not implemented")
}
func (*UnimplementedEIEIOrpcServer) EmitterGroupNames(context.Context, *StringInput) (*StringList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmitterGroupNames not implemented")
}
func (*UnimplementedEIEIOrpcServer) EmitterGroupAbbrevs(context.Context, *StringInput) (*StringList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmitterGroupAbbrevs not implemented")
}
func (*UnimplementedEIEIOrpcServer) Commodities(context.Context, *StringInput) (*StringList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commodities not implemented")
}
func (*UnimplementedEIEIOrpcServer) Industries(context.Context, *StringInput) (*StringList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Industries not implemented")
}
func (*UnimplementedEIEIOrpcServer) DemographicConsumption(context.Context, *DemographicConsumptionInput) (*Vector, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DemographicConsumption not implemented")
}

func RegisterEIEIOrpcServer(s *grpc.Server, srv EIEIOrpcServer) {
	s.RegisterService(&_EIEIOrpc_serviceDesc, srv)
}

func _EIEIOrpc_EndUseGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Selection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).EndUseGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/EndUseGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).EndUseGroups(ctx, req.(*Selection))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_EndUseSectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Selection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).EndUseSectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/EndUseSectors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).EndUseSectors(ctx, req.(*Selection))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_EmitterGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Selection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).EmitterGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/EmitterGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).EmitterGroups(ctx, req.(*Selection))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_EmitterSectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Selection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).EmitterSectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/EmitterSectors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).EmitterSectors(ctx, req.(*Selection))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_Years_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Selection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).Years(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/Years",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).Years(ctx, req.(*Selection))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_DefaultSelection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Selection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).DefaultSelection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/DefaultSelection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).DefaultSelection(ctx, req.(*Selection))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_Populations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Selection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).Populations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/Populations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).Populations(ctx, req.(*Selection))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_MapInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Selection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).MapInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/MapInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).MapInfo(ctx, req.(*Selection))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_Geometry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeometryInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).Geometry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/Geometry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).Geometry(ctx, req.(*GeometryInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_Concentrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConcentrationInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).Concentrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/Concentrations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).Concentrations(ctx, req.(*ConcentrationInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_ConcentrationMatrix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConcentrationMatrixInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).ConcentrationMatrix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/ConcentrationMatrix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).ConcentrationMatrix(ctx, req.(*ConcentrationMatrixInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_Emissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmissionsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).Emissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/Emissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).Emissions(ctx, req.(*EmissionsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_EmissionsMatrix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmissionsMatrixInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).EmissionsMatrix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/EmissionsMatrix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).EmissionsMatrix(ctx, req.(*EmissionsMatrixInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).Health(ctx, req.(*HealthInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_HealthMatrix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthMatrixInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).HealthMatrix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/HealthMatrix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).HealthMatrix(ctx, req.(*HealthMatrixInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_EvaluationHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluationHealthInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).EvaluationHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/EvaluationHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).EvaluationHealth(ctx, req.(*EvaluationHealthInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_EvaluationConcentrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluationConcentrationsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).EvaluationConcentrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/EvaluationConcentrations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).EvaluationConcentrations(ctx, req.(*EvaluationConcentrationsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_ConcentrationResponseAverage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConcentrationResponseAverageInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).ConcentrationResponseAverage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/ConcentrationResponseAverage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).ConcentrationResponseAverage(ctx, req.(*ConcentrationResponseAverageInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_PopulationIncidenceDem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PopulationIncidenceDemInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).PopulationIncidenceDem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/PopulationIncidenceDem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).PopulationIncidenceDem(ctx, req.(*PopulationIncidenceDemInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_PopulationIncidence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PopulationIncidenceInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).PopulationIncidence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/PopulationIncidence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).PopulationIncidence(ctx, req.(*PopulationIncidenceInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_FinalDemand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalDemandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).FinalDemand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/FinalDemand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).FinalDemand(ctx, req.(*FinalDemandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_EndUseMask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).EndUseMask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/EndUseMask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).EndUseMask(ctx, req.(*StringInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_EmitterMask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).EmitterMask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/EmitterMask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).EmitterMask(ctx, req.(*StringInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_EndUseGroupNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).EndUseGroupNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/EndUseGroupNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).EndUseGroupNames(ctx, req.(*StringInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_EndUseGroupAbbrevs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).EndUseGroupAbbrevs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/EndUseGroupAbbrevs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).EndUseGroupAbbrevs(ctx, req.(*StringInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_EmitterGroupNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).EmitterGroupNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/EmitterGroupNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).EmitterGroupNames(ctx, req.(*StringInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_EmitterGroupAbbrevs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).EmitterGroupAbbrevs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/EmitterGroupAbbrevs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).EmitterGroupAbbrevs(ctx, req.(*StringInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_Commodities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).Commodities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/Commodities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).Commodities(ctx, req.(*StringInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_Industries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).Industries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/Industries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).Industries(ctx, req.(*StringInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_DemographicConsumption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DemographicConsumptionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).DemographicConsumption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/DemographicConsumption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).DemographicConsumption(ctx, req.(*DemographicConsumptionInput))
	}
	return interceptor(ctx, in, info, handler)
}

var _EIEIOrpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eieiorpc.EIEIOrpc",
	HandlerType: (*EIEIOrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EndUseGroups",
			Handler:    _EIEIOrpc_EndUseGroups_Handler,
		},
		{
			MethodName: "EndUseSectors",
			Handler:    _EIEIOrpc_EndUseSectors_Handler,
		},
		{
			MethodName: "EmitterGroups",
			Handler:    _EIEIOrpc_EmitterGroups_Handler,
		},
		{
			MethodName: "EmitterSectors",
			Handler:    _EIEIOrpc_EmitterSectors_Handler,
		},
		{
			MethodName: "Years",
			Handler:    _EIEIOrpc_Years_Handler,
		},
		{
			MethodName: "DefaultSelection",
			Handler:    _EIEIOrpc_DefaultSelection_Handler,
		},
		{
			MethodName: "Populations",
			Handler:    _EIEIOrpc_Populations_Handler,
		},
		{
			MethodName: "MapInfo",
			Handler:    _EIEIOrpc_MapInfo_Handler,
		},
		{
			MethodName: "Geometry",
			Handler:    _EIEIOrpc_Geometry_Handler,
		},
		{
			MethodName: "Concentrations",
			Handler:    _EIEIOrpc_Concentrations_Handler,
		},
		{
			MethodName: "ConcentrationMatrix",
			Handler:    _EIEIOrpc_ConcentrationMatrix_Handler,
		},
		{
			MethodName: "Emissions",
			Handler:    _EIEIOrpc_Emissions_Handler,
		},
		{
			MethodName: "EmissionsMatrix",
			Handler:    _EIEIOrpc_EmissionsMatrix_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _EIEIOrpc_Health_Handler,
		},
		{
			MethodName: "HealthMatrix",
			Handler:    _EIEIOrpc_HealthMatrix_Handler,
		},
		{
			MethodName: "EvaluationHealth",
			Handler:    _EIEIOrpc_EvaluationHealth_Handler,
		},
		{
			MethodName: "EvaluationConcentrations",
			Handler:    _EIEIOrpc_EvaluationConcentrations_Handler,
		},
		{
			MethodName: "ConcentrationResponseAverage",
			Handler:    _EIEIOrpc_ConcentrationResponseAverage_Handler,
		},
		{
			MethodName: "PopulationIncidenceDem",
			Handler:    _EIEIOrpc_PopulationIncidenceDem_Handler,
		},
		{
			MethodName: "PopulationIncidence",
			Handler:    _EIEIOrpc_PopulationIncidence_Handler,
		},
		{
			MethodName: "FinalDemand",
			Handler:    _EIEIOrpc_FinalDemand_Handler,
		},
		{
			MethodName: "EndUseMask",
			Handler:    _EIEIOrpc_EndUseMask_Handler,
		},
		{
			MethodName: "EmitterMask",
			Handler:    _EIEIOrpc_EmitterMask_Handler,
		},
		{
			MethodName: "EndUseGroupNames",
			Handler:    _EIEIOrpc_EndUseGroupNames_Handler,
		},
		{
			MethodName: "EndUseGroupAbbrevs",
			Handler:    _EIEIOrpc_EndUseGroupAbbrevs_Handler,
		},
		{
			MethodName: "EmitterGroupNames",
			Handler:    _EIEIOrpc_EmitterGroupNames_Handler,
		},
		{
			MethodName: "EmitterGroupAbbrevs",
			Handler:    _EIEIOrpc_EmitterGroupAbbrevs_Handler,
		},
		{
			MethodName: "Commodities",
			Handler:    _EIEIOrpc_Commodities_Handler,
		},
		{
			MethodName: "Industries",
			Handler:    _EIEIOrpc_Industries_Handler,
		},
		{
			MethodName: "DemographicConsumption",
			Handler:    _EIEIOrpc_DemographicConsumption_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eieio.proto",
}
